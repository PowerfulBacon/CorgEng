using CorgEng.Core.Dependencies;
using CorgEng.Core.Interfaces.Logging;
using CorgEng.Core.Rendering;
using CorgEng.Core.Rendering.Exceptions;
using GLFW;
using System.Collections.Generic;

namespace CorgEng.Core
{
    public static class CorgEngMain
    {

        /// <summary>
        /// The internal render master.
        /// Handles transfering iamges generated by the RenderCore to 
        /// the screen.
        /// </summary>
        private static RenderMaster InternalRenderMaster { get; set; }

        /// <summary>
        /// The main render core currently in use by the renderer
        /// </summary>
        public static RenderCore MainRenderCore { get; private set; }

        /// <summary>
        /// The window associated with the CorgEng application
        /// </summary>
        private static CorgEngWindow GameWindow { get; set; }

        /// <summary>
        /// Create a logger
        /// </summary>
        [UsingDependency]
        private static ILogger Logger;
        
        /// <summary>
        /// Initializes the CorgEng game engine.
        /// Will call initialization on all CorgEng modules.
        /// </summary>
        public static void Initialize()
        {
            Logger?.WriteLine("Starting CorgEng Application", LogType.DEBUG);
            //Create a new window
            GameWindow = new CorgEngWindow();
            GameWindow.Open();
            Logger?.WriteLine("Successfully created primary window", LogType.DEBUG);
            //Create the internal render master
            InternalRenderMaster = new RenderMaster();
            InternalRenderMaster.Initialize();
            Logger?.WriteLine("Successfully initialized render master", LogType.DEBUG);
        }

        /// <summary>
        /// Transfers control of the main thread to the internal
        /// CorgEng rendering pipeline.
        /// </summary>
        public static void TransferToRenderingThread()
        {
            //While the window shouldn't close
            while (!GameWindow.ShouldClose())
            {
                //Swap the framebuffers
                GameWindow.SwapFramebuffers();
                //Poll for system events to prevent the program from showing as hanging
                Glfw.PollEvents();
                //Check to ensure we have a render core
                if (MainRenderCore == null)
                    throw new NullRenderCoreException("The main CorgEng render core is not set! Use CorgEng.SetRenderCore(RenderCore) to set the primary render core.");
                //Process the main render core
                MainRenderCore.PreRender();
                MainRenderCore.PerformRender();
                //Pass the output image from the render core to the internal renderer
                InternalRenderMaster.RenderImageToScreen(MainRenderCore.FrameBufferUint);
            }
        }

        /// <summary>
        /// Sets the CorgEng program's render core.
        /// </summary>
        public static void SetRenderCore(RenderCore newRenderCore)
        {
            MainRenderCore = newRenderCore;
            MainRenderCore.Initialize();
        }

        /// <summary>
        /// Shuts down and cleans up all resources used by CorgEng
        /// at the end of the program.
        /// </summary>
        public static void Shutdown()
        {
            //Terminate GLFW
            Glfw.Terminate();
        }

        private static void PriorityModuleInit()
        {
            //TODO
        }

        private static void ModuleInit()
        {

        }

    }
}
