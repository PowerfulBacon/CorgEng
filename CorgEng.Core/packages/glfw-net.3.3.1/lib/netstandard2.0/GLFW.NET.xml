<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GLFW.NET</name>
    </assembly>
    <members>
        <member name="T:GLFW.CharEventArgs">
            <summary>
                Arguments supplied with char input events.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:GLFW.CharEventArgs.#ctor(System.UInt32,GLFW.ModifierKeys)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.CharEventArgs" /> class.
            </summary>
            <param name="codePoint">A UTF-32 code point.</param>
            <param name="mods">The modifier keys present.</param>
        </member>
        <member name="P:GLFW.CharEventArgs.Char">
            <summary>
                Gets the Unicode character for the code point.
            </summary>
            <value>
                The character.
            </value>
        </member>
        <member name="P:GLFW.CharEventArgs.CodePoint">
            <summary>
                Gets the platform independent code point.
                <para>This value can be treated as a UTF-32 code point.</para>
            </summary>
            <value>
                The code point.
            </value>
        </member>
        <member name="P:GLFW.CharEventArgs.ModifierKeys">
            <summary>
                Gets the modifier keys.
            </summary>
            <value>
                The modifier keys.
            </value>
        </member>
        <member name="T:GLFW.ContentScaleEventArgs">
            <summary>
                Arguments used when a window content scaling is changed.
            </summary>
        </member>
        <member name="M:GLFW.ContentScaleEventArgs.#ctor(System.Single,System.Single)">
            <summary>
            </summary>
            <param name="xScale">The new scale on the x-axis.</param>
            <param name="yScale">The new scale on the y-axis.</param>
        </member>
        <member name="P:GLFW.ContentScaleEventArgs.XScale">
            <summary>
                Gets the new scale on the x-axis.
            </summary>
        </member>
        <member name="P:GLFW.ContentScaleEventArgs.YScale">
            <summary>
                Gets the new scale on the y-axis.
            </summary>
        </member>
        <member name="T:GLFW.ErrorCallback">
            <summary>
                Function signature for receiving error callbacks.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">A pointer to the UTF-8 encoded (null-terminated) error message.</param>
        </member>
        <member name="T:GLFW.SizeCallback">
            <summary>
                This is the function signature for window size callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="width">The new width, in screen coordinates, of the window.</param>
            <param name="height">The new height, in screen coordinates, of the window.</param>
        </member>
        <member name="T:GLFW.PositionCallback">
            <summary>
                This is the function signature for cursor position callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="x">The new cursor x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The new cursor y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="T:GLFW.FocusCallback">
            <summary>
                This is the function signature for window focus callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="focusing"><c>true</c> if window is gaining focus; otherise <c>false</c>.</param>
        </member>
        <member name="T:GLFW.WindowCallback">
            <summary>
                Generic signature for window callbacks.
            </summary>
            <param name="window">The window handle.</param>
        </member>
        <member name="T:GLFW.FileDropCallback">
            <summary>
                This is the function signature for file drop callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="count">The number of dropped files.</param>
            <param name="arrayPtr">Pointer to an array UTF-8 encoded file and/or directory path name pointers.</param>
        </member>
        <member name="T:GLFW.MouseCallback">
            <summary>
                This is the function signature for cursor position callback functions.
            </summary>
            <param name="window">The window handle recieving the event.</param>
            <param name="x">The new cursor x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The new cursor y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="T:GLFW.MouseEnterCallback">
            <summary>
                This is the function signature for cursor enter/leave callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="entering"><c>true</c> if cursor is entering the window client area; otherwise <c>false</c>.</param>
        </member>
        <member name="T:GLFW.MouseButtonCallback">
            <summary>
                This is the function signature for mouse button callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="button">TThe mouse button that was pressed or released.</param>
            <param name="state">The state.</param>
            <param name="modifiers">Flags describing which modifier keys were held down.</param>
        </member>
        <member name="T:GLFW.CharCallback">
            <summary>
                This is the function signature for Unicode character callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="codePoint">The Unicode code point of the character.</param>
        </member>
        <member name="T:GLFW.CharModsCallback">
            <summary>
                This is the function signature for Unicode character callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="codePoint">The Unicode code point of the character.</param>
            <param name="mods">Bit field describing which modifier keys were held down.</param>
        </member>
        <member name="T:GLFW.KeyCallback">
            <summary>
                This is the function signature for keyboard key callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="key">The keyboard key that was pressed or released.</param>
            <param name="scanCode">The system-specific scancode of the key.</param>
            <param name="state">The state of the key.</param>
            <param name="mods">	Bit field describing which modifier keys were held down.</param>
        </member>
        <member name="T:GLFW.JoystickCallback">
            <summary>
                This is the function signature for joystick configuration callback functions.
            </summary>
            <param name="joystick">The joystick that was connected or disconnected.</param>
            <param name="status">The connection status.</param>
        </member>
        <member name="T:GLFW.MonitorCallback">
            <summary>
                This is the function signature for monitor configuration callback functions.
            </summary>
            <param name="monitor">The monitor that was connected or disconnected.</param>
            <param name="status">The connection status.</param>
        </member>
        <member name="T:GLFW.IconifyCallback">
            <summary>
                This is the function signature for window iconify/restore callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="focusing"><c>true</c> if window is iconified; otherwise <c>false</c> if restoring.</param>
        </member>
        <member name="T:GLFW.WindowContentsScaleCallback">
            <summary>
                This is the function signature for window content scale callback functions.
            </summary>
            <param name="window">The window whose content scale changed.</param>
            <param name="xScale">The new x-axis content scale of the window.</param>
            <param name="yScale">The new y-axis content scale of the window.</param>
        </member>
        <member name="T:GLFW.WindowMaximizedCallback">
            <summary>
                This is the function signature for window maximize/restore callback functions.
            </summary>
            <param name="window">The window that was maximized or restored.</param>
            <param name="maximized"><c>true</c> if the window was maximized, or <c>false</c> if it was restored.</param>
        </member>
        <member name="T:GLFW.ClientApi">
            <summary>
                Strongly-typed description for possible client APIs to be used.
            </summary>
        </member>
        <member name="F:GLFW.ClientApi.None">
            <summary>
                No context
            </summary>
        </member>
        <member name="F:GLFW.ClientApi.OpenGL">
            <summary>
                OpenGL
            </summary>
        </member>
        <member name="F:GLFW.ClientApi.OpenGLES">
            <summary>
                OpenGL ES
            </summary>
        </member>
        <member name="T:GLFW.ConnectionStatus">
            <summary>
                Strongly-typed values indicating connection status of joysticks, monitors, etc.
            </summary>
        </member>
        <member name="F:GLFW.ConnectionStatus.Unknown">
            <summary>
                Unknown connection status.
            </summary>
        </member>
        <member name="F:GLFW.ConnectionStatus.Connected">
            <summary>
                Device is currently connected and visible to GLFW.
            </summary>
        </member>
        <member name="F:GLFW.ConnectionStatus.Disconnected">
            <summary>
                Device is disconnected and/or not visible to GLFW.
            </summary>
        </member>
        <member name="T:GLFW.Constants">
            <summary>
                Strongly-typed values for commonly used constants.
                <para>You are free to use the integer value instead of these constants.</para>
            </summary>
        </member>
        <member name="F:GLFW.Constants.Default">
            <summary>
                No preference or don't care, use default value.
            </summary>
        </member>
        <member name="F:GLFW.Constants.False">
            <summary>
                Boolean false
            </summary>
        </member>
        <member name="F:GLFW.Constants.True">
            <summary>
                Boolean true
            </summary>
        </member>
        <member name="T:GLFW.ContextApi">
            <summary>
                Describes the API used for creating the OpenGL context.
            </summary>
        </member>
        <member name="F:GLFW.ContextApi.Native">
            <summary>
                The native platform default.
            </summary>
        </member>
        <member name="F:GLFW.ContextApi.Egl">
            <summary>
                EGL
            </summary>
        </member>
        <member name="F:GLFW.ContextApi.Mesa">
            <summary>
                OS Mesa
            </summary>
        </member>
        <member name="T:GLFW.ContextAttributes">
            <summary>
                Used internally to consolidate strongly-typed values for getting/setting window attributes.
            </summary>
        </member>
        <member name="T:GLFW.CursorMode">
            <summary>
                Indicates the behavior of the mouse cursor.
            </summary>
        </member>
        <member name="F:GLFW.CursorMode.Normal">
            <summary>
                The cursor is visible and behaves normally.
            </summary>
        </member>
        <member name="F:GLFW.CursorMode.Hidden">
            <summary>
                The cursor is invisible when it is over the client area of the window but does not restrict the cursor from
                leaving.
            </summary>
        </member>
        <member name="F:GLFW.CursorMode.Disabled">
            <summary>
                Hides and grabs the cursor, providing virtual and unlimited cursor movement. This is useful for implementing for
                example 3D camera controls.
            </summary>
        </member>
        <member name="T:GLFW.CursorType">
            <summary>
                Strongly-typed values describing possible cursor shapes.
            </summary>
        </member>
        <member name="F:GLFW.CursorType.Arrow">
            <summary>
                The regular arrow cursor.
            </summary>
        </member>
        <member name="F:GLFW.CursorType.Beam">
            <summary>
                The text input I-beam cursor shape.
            </summary>
        </member>
        <member name="F:GLFW.CursorType.Crosshair">
            <summary>
                The crosshair shape.
            </summary>
        </member>
        <member name="F:GLFW.CursorType.Hand">
            <summary>
                The hand shape.
            </summary>
        </member>
        <member name="F:GLFW.CursorType.ResizeHorizontal">
            <summary>
                The horizontal resize arrow shape.
            </summary>
        </member>
        <member name="F:GLFW.CursorType.ResizeVertical">
            <summary>
                The vertical resize arrow shape.
            </summary>
        </member>
        <member name="T:GLFW.ErrorCode">
            <summary>
                Strongly-typed error codes for error handling.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.Unknown">
            <summary>
                An unknown or undefined error.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.None">
            <summary>
                No error has occurred.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.NotInitialized">
            <summary>
                This occurs if a GLFW function was called that must not be called unless the library is initialized.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.NoCurrentContext">
            <summary>
                This occurs if a GLFW function was called that needs and operates on the current OpenGL or OpenGL ES context but no
                context is current on the calling thread.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.InvalidEnum">
            <summary>
                One of the arguments to the function was an invalid enum value.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.InvalidValue">
            <summary>
                One of the arguments to the function was an invalid value, for example requesting a non-existent OpenGL or OpenGL
                ES version like 2.7.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.OutOfMemory">
            <summary>
                A memory allocation failed.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.ApiUnavailable">
            <summary>
                GLFW could not find support for the requested API on the system.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.VersionUnavailable">
            <summary>
                The requested OpenGL or OpenGL ES version (including any requested context or framebuffer hints) is not available
                on this machine.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.PlatformError">
            <summary>
                A platform-specific error occurred that does not match any of the more specific categories.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.FormatUnavailable">
            <summary>
                If emitted during window creation, the requested pixel format is not supported, else if emitted when querying the
                clipboard, the contents of the clipboard could not be converted to the requested format.
            </summary>
        </member>
        <member name="F:GLFW.ErrorCode.NoWindowContext">
            <summary>
                A window that does not have an OpenGL or OpenGL ES context was passed to a function that requires it to have one.
            </summary>
        </member>
        <member name="T:GLFW.GamePadAxis">
            <summary>
                Represents a gamepad axis.
            </summary>
        </member>
        <member name="T:GLFW.GamePadButton">
            <summary>
                Represents gamepad buttons.
                <para>
                    Duplicate values convenience for providing naming conventions for common gamepads (PlayStation,
                    X-Box, etc).
                </para>
            </summary>
        </member>
        <member name="T:GLFW.Hat">
            <summary>
                Describes joystick hat states.
            </summary>
        </member>
        <member name="F:GLFW.Hat.Centered">
            <summary>
                Centered
            </summary>
        </member>
        <member name="F:GLFW.Hat.Up">
            <summary>
                Up
            </summary>
        </member>
        <member name="F:GLFW.Hat.Right">
            <summary>
                Right
            </summary>
        </member>
        <member name="F:GLFW.Hat.Down">
            <summary>
                Down
            </summary>
        </member>
        <member name="F:GLFW.Hat.Left">
            <summary>
                Left
            </summary>
        </member>
        <member name="F:GLFW.Hat.RightUp">
            <summary>
                Right and up
            </summary>
        </member>
        <member name="F:GLFW.Hat.RightDown">
            <summary>
                Right and down
            </summary>
        </member>
        <member name="F:GLFW.Hat.LeftUp">
            <summary>
                Left and up
            </summary>
        </member>
        <member name="F:GLFW.Hat.LeftDown">
            <summary>
                Left and down
            </summary>
        </member>
        <member name="T:GLFW.Hint">
            <summary>
                Strongly-typed values for setting window hints.
            </summary>
        </member>
        <member name="F:GLFW.Hint.Focused">
            <summary>
                Specifies whether the windowed mode window will be given input focus when created. This hint is ignored for full
                screen and initially hidden windows.
                <para>Default Value: <see cref="F:GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.Resizable">
            <summary>
                Specifies whether the windowed mode window will be resizable by the user. The window will still be resizable
                programmatically. This hint is ignored for full screen windows.
                <para>Default Value: <see cref="F:GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.Visible">
            <summary>
                Specifies whether the windowed mode window will be initially visible.This hint is ignored for full screen windows.
                <para>Default Value: <see cref="F:GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.Decorated">
            <summary>
                Specifies whether the windowed mode window will have window decorations such as a border, a close widget, etc.An
                undecorated window may still allow the user to generate close events on some platforms.This hint is ignored for
                full screen windows.
                <para>Default Value: <see cref="F:GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.AutoIconify">
            <summary>
                Specifies whether the full screen window will automatically iconify and restore the previous video mode on input
                focus loss. This hint is ignored for windowed mode windows.
                <para>Default Value: <see cref="F:GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.Floating">
            <summary>
                Specifies whether the windowed mode window will be floating above other regular windows, also called topmost or
                always-on-top.This is intended primarily for debugging purposes and cannot be used to implement proper full screen
                windows. This hint is ignored for full screen windows.
                <para>Default Value: <see cref="F:GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.Maximized">
            <summary>
                Specifies whether the windowed mode window will be maximized when created. This hint is ignored for full screen
                windows.
                <para>Default Value: <see cref="F:GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.RedBits">
            <summary>
                Specifies the desired bit depth of the red component for default framebuffer. <see cref="F:GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Default Value: <c>8</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.GreenBits">
            <summary>
                Specifies the desired bit depth of the green component for default framebuffer. <see cref="F:GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Default Value: <c>8</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.BlueBits">
            <summary>
                Specifies the desired bit depth of the blue component for default framebuffer. <see cref="F:GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Default Value: <c>8</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.AlphaBits">
            <summary>
                Specifies the desired bit depth of the alpha component for default framebuffer. <see cref="F:GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Default Value: <c>8</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.DepthBits">
            <summary>
                Specifies the desired bit depth of for default framebuffer. <see cref="F:GLFW.Constants.Default" />"/> means the
                application
                has no preference.
                <para>Default Value: <c>24</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.StencilBits">
            <summary>
                Specifies the desired stencil bits for default framebuffer. <see cref="F:GLFW.Constants.Default" /> means the application
                has
                no preference.
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.AccumRedBits">
            <summary>
                Specify the desired bit depths of the red component of the accumulation buffer. <see cref="F:GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.AccumGreenBits">
            <summary>
                Specify the desired bit depths of the green component of the accumulation buffer. <see cref="F:GLFW.Constants.Default" />
                means the application has no preference.
                <para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.AccumBlueBits">
            <summary>
                Specify the desired bit depths of the blue component of the accumulation buffer. <see cref="F:GLFW.Constants.Default" />
                means the application has no preference.
                <para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.AccumAlphaBits">
            <summary>
                Specify the desired bit depths of the alpha component of the accumulation buffer.
                <para><see cref="F:GLFW.Constants.Default" /> means the application has no preference.</para>
                <para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.AuxBuffers">
            <summary>
                Specifies the desired number of auxiliary buffers.<see cref="F:GLFW.Constants.Default" /> means the application has no
                preference.
                <para>Auxiliary buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.Stereo">
            <summary>
                Specifies whether to use stereoscopic rendering.
                <para>This is a hard constraint.</para>
                <para>Default Value: <see cref="F:GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.Samples">
            <summary>
                Specifies the desired number of samples to use for multisampling.Zero disables multisampling.
                <para><see cref="F:GLFW.Constants.Default" /> means the application has no preference.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.SrgbCapable">
            <summary>
                Specifies whether the framebuffer should be sRGB capable. If supported, a created OpenGL context will support the
                GL_FRAMEBUFFER_SRGB enable, also called GL_FRAMEBUFFER_SRGB_EXT) for controlling sRGB rendering and a created
                OpenGL ES context will always have sRGB rendering enabled.
                <para>Default Value: <see cref="F:GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.Doublebuffer">
            <summary>
                Specifies whether the framebuffer should be double buffered.You nearly always want to use double buffering.
                <para>This is a hard constraint.</para>
                <para>Default Value: <see cref="F:GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.RefreshRate">
            <summary>
                Specifies the desired refresh rate for full screen windows.
                <para>If set to <see cref="F:GLFW.Constants.Default" />, the highest available refresh rate will be used.</para>
                <para>This hint is ignored for windowed mode windows.</para>
                <para>Default Value: <see cref="F:GLFW.Constants.Default" /></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.ClientApi">
            <summary>
                Specifies which client API to create the context for.
                <para>This is a hard constraint.</para>
                <para>Default Value: <see cref="F:GLFW.ClientApi.OpenGL" /></para>
                <para>Possible Values: Any of <see cref="T:GLFW.ClientApi" /> values.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.ContextCreationApi">
            <summary>
                Specifies which context creation API to use to create the context.
                <para>If no client API is requested, this hint is ignored.</para>
                <para>This is a hard constraint. </para>
                <para>Default Value: <see cref="F:GLFW.ContextApi.Native" /></para>
                <para>Possible Values: Any of <see cref="T:GLFW.ContextApi" /> values.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.ContextVersionMajor">
            <summary>
                Specify the client API major version that the created context must be compatible with.
                <para>The exact behavior of this hint depends on the requested client API, see remarks for details.</para>
                <para>Default Value: <c>1</c></para>
                <para>Possible Values: Any valid major version of the chosen client API</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.ContextVersionMinor">
            <summary>
                Specify the client API minor version that the created context must be compatible with.
                <para>The exact behavior of this hint depends on the requested client API, see remarks for details.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: Any valid minor version of the chosen client API</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.ContextRobustness">
            <summary>
                Specifies the robustness strategy to be used by the context.
                <para>Default Value: <see cref="F:GLFW.Robustness.None" /></para>
                <para>Possible Values: Any of <see cref="T:GLFW.Robustness" /> values</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.OpenglForwardCompatible">
            <summary>
                Specifies whether the OpenGL context should be forward-compatible, i.e. one where all functionality deprecated in
                the requested version of OpenGL is removed.
                <para>This must only be used if the requested OpenGL version is 3.0 or above.</para>
                <para>If OpenGL ES is requested, this hint is ignored</para>
                <para>Forward-compatibility is described in detail in the OpenGL Reference Manual.</para>
                <para>Default Value: <see cref="F:GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.OpenglDebugContext">
            <summary>
                Specifies whether to create a debug OpenGL context, which may have additional error and performance issue reporting
                functionality.
                <para>If OpenGL ES is requested, this hint is ignored.</para>
                <para>Default Value: <see cref="F:GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.OpenglProfile">
            <summary>
                Specifies which OpenGL profile to create the context for.
                <para>If requesting an OpenGL version below <c>3.2</c>, <see cref="F:GLFW.Profile.Any" />  must be used.</para>
                <para>If OpenGL ES is requested, this hint is ignored.</para>
                <para>OpenGL profiles are described in detail in the OpenGL Reference Manual.</para>
                <para>Default Value: <see cref="F:GLFW.Profile.Any" /></para>
                <para>Possible Values: Any of <see cref="T:GLFW.Profile" /> values</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.ContextReleaseBehavior">
            <summary>
                Specifies the release behavior to be used by the context.
                <para>Default Value: <see cref="F:GLFW.ReleaseBehavior.Any" /></para>
                <para>Possible Values: Any of <see cref="T:GLFW.ReleaseBehavior" /> values</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.ContextNoError">
            <summary>
                Specifies whether errors should be generated by the context. If enabled, situations that would have generated
                errors instead cause undefined behavior.
                <para>Default Value: <see cref="F:GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:GLFW.Constants.True" /> or <see cref="F:GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.JoystickHatButtons">
            <summary>
                Specifies whether to also expose joystick hats as buttons, for compatibility with earlier versions of
                GLFW (less than 3.3) that did not have <see cref="M:GLFW.Glfw.GetJoystickHats(System.Int32)" />.
            </summary>
        </member>
        <member name="F:GLFW.Hint.CocoaChDirResources">
            <summary>
                Specifies whether to set the current directory to the application to the Contents/Resources
                subdirectory of the application's bundle, if present.
                <para>macOS ONLY!</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.CocoaMenuBar">
            <summary>
                Specifies whether to create a basic menu bar, either from a nib or manually, when the first window is
                created, which is when AppKit is initialized.
                <para>macOS ONLY!</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.CenterCursor">
            <summary>
                Specifies whether the cursor should be centered over newly created full screen windows.
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
                <para>This hint is ignored for windowed mode windows.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.TransparentFramebuffer">
            <summary>
                Specifies whether the window framebuffer will be transparent.
                <para>
                    If enabled and supported by the system, the window framebuffer alpha channel will be used to combine
                    the framebuffer with the background. This does not affect window decorations.
                </para>
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.FocusOnShow">
            <summary>
                Specifies whether the window will be given input focus when <see cref="M:GLFW.Glfw.ShowWindow(GLFW.Window)" /> is called.
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.ScaleToMonitor">
            <summary>
                Specifies whether the window content area should be resized based on the monitor content scale of any
                monitor it is placed on. This includes the initial placement when the window is created.
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
                <para>
                    This hint only has an effect on platforms where screen coordinates and pixels always map 1:1 such as
                    Windows and X11. On platforms like macOS the resolution of the framebuffer is changed independently
                    of the window size.
                </para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.CocoaRetinaFrameBuffer">
            <summary>
                Specifies whether to use full resolution framebuffers on Retina displays.
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
                <para>This is ignored on other platforms.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.CocoaFrameName">
            <summary>
                Specifies the UTF-8 encoded name to use for auto-saving the window frame, or if empty disables frame
                auto-saving for the window.
                <para>macOs only, this is ignored on other platforms.</para>
                <para>This is set with <see cref="M:GLFW.Glfw.WindowHintString(GLFW.Hint,System.Byte[])" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.CocoaGraphicsSwitching">
            <summary>
                Specifies whether to in Automatic Graphics Switching, i.e. to allow the system to choose the integrated
                GPU for the OpenGL context and move it between GPUs if necessary or whether to force it to always run on
                the discrete GPU.
                <para>This only affects systems with both integrated and discrete GPUs, ignored on other platforms.</para>
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.X11ClassName">
            <summary>
                Specifies the desired ASCII encoded class parts of the ICCCM <c>WM_CLASS</c> window property.
                <para>Set with <see cref="M:GLFW.Glfw.WindowHintString(GLFW.Hint,System.Byte[])" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.Hint.X11InstanceName">
            <summary>
                Specifies the desired ASCII encoded instance parts of the ICCCM <c>WM_CLASS</c> window property.
                <para>Set with <see cref="M:GLFW.Glfw.WindowHintString(GLFW.Hint,System.Byte[])" />.</para>
            </summary>
        </member>
        <member name="T:GLFW.InputMode">
            <summary>
                Strongly-typed values for getting/setting the input mode hints.
            </summary>
        </member>
        <member name="F:GLFW.InputMode.Cursor">
            <summary>
                If specified, enables setting the mouse behavior.
                <para>See <see cref="T:GLFW.CursorMode" /> for possible values.</para>
            </summary>
        </member>
        <member name="F:GLFW.InputMode.StickyKeys">
            <summary>
                If specified, enables setting sticky keys, where <see cref="M:GLFW.Glfw.GetKey(GLFW.Window,GLFW.Keys)" /> will return
                <see cref="F:GLFW.InputState.Press" /> the first time you call it for a key that was pressed, even if that key has already
                been released.
            </summary>
        </member>
        <member name="F:GLFW.InputMode.StickyMouseButton">
            <summary>
                If specified, enables setting sticky mouse buttons, where <see cref="M:GLFW.Glfw.GetMouseButton(GLFW.Window,GLFW.MouseButton)" /> will return
                <see cref="F:GLFW.InputState.Press" /> the first time you call it for a mouse button that was pressed, even if that mouse
                button has already been released.
            </summary>
        </member>
        <member name="F:GLFW.InputMode.LockKeyMods">
            <summary>
                When this input mode is enabled, any callback that receives modifier bits will have the
                <see cref="F:GLFW.ModifierKeys.CapsLock" /> bit set if caps lock was on when the event occurred and the
                <see cref="F:GLFW.ModifierKeys.NumLock" /> bit set if num lock was on.
            </summary>
        </member>
        <member name="F:GLFW.InputMode.RawMouseMotion">
            <summary>
                When the cursor is disabled, raw (unscaled and unaccelerated) mouse motion can be enabled if available.
                <seealso cref="M:GLFW.Glfw.RawMouseMotionSupported" />
            </summary>
        </member>
        <member name="T:GLFW.InputState">
            <summary>
                Describes the state of a button/key.
            </summary>
        </member>
        <member name="F:GLFW.InputState.Release">
            <summary>
                The key or mouse button was released.
            </summary>
        </member>
        <member name="F:GLFW.InputState.Press">
            <summary>
                The key or mouse button was pressed.
            </summary>
        </member>
        <member name="F:GLFW.InputState.Repeat">
            <summary>
                The key was held down until it repeated.
            </summary>
        </member>
        <member name="T:GLFW.Joystick">
            <summary>
                Strongly-typed values describing possible joysticks.
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick1">
            <summary>
                Joystick 1
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick2">
            <summary>
                Joystick 2
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick3">
            <summary>
                Joystick 3
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick4">
            <summary>
                Joystick 4
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick5">
            <summary>
                Joystick 5
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick6">
            <summary>
                Joystick 6
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick7">
            <summary>
                Joystick 7
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick8">
            <summary>
                Joystick 8
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick9">
            <summary>
                Joystick 9
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick10">
            <summary>
                Joystick 10
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick11">
            <summary>
                Joystick 11
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick12">
            <summary>
                Joystick 12
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick13">
            <summary>
                Joystick 13
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick14">
            <summary>
                Joystick 14
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick15">
            <summary>
                Joystick 15
            </summary>
        </member>
        <member name="F:GLFW.Joystick.Joystick16">
            <summary>
                Joystick 16
            </summary>
        </member>
        <member name="T:GLFW.Keys">
            <summary>
                Strongly-typed enumeration for key code values.
            </summary>
        </member>
        <member name="T:GLFW.ModifierKeys">
            <summary>
                Describes bitwise combination of modifier keys.
            </summary>
        </member>
        <member name="F:GLFW.ModifierKeys.Shift">
            <summary>
                Either of the Shift keys.
            </summary>
        </member>
        <member name="F:GLFW.ModifierKeys.Control">
            <summary>
                Either of the Ctrl keys.
            </summary>
        </member>
        <member name="F:GLFW.ModifierKeys.Alt">
            <summary>
                Either of the Alt keys
            </summary>
        </member>
        <member name="F:GLFW.ModifierKeys.Super">
            <summary>
                The super key ("Windows" key on Windows)
            </summary>
        </member>
        <member name="F:GLFW.ModifierKeys.CapsLock">
            <summary>
                The caps-lock is enabled.
            </summary>
        </member>
        <member name="F:GLFW.ModifierKeys.NumLock">
            <summary>
                The num-lock is enabled.
            </summary>
        </member>
        <member name="T:GLFW.MouseButton">
            <summary>
                Strongly-typed enumeration describing mouse buttons.
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Button1">
            <summary>
                Mouse button 1.
                <para>Same as <see cref="F:GLFW.MouseButton.Left" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Button2">
            <summary>
                Mouse button 2.
                <para>Same as <see cref="F:GLFW.MouseButton.Right" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Button3">
            <summary>
                Mouse button 3.
                <para>Same as <see cref="F:GLFW.MouseButton.Middle" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Button4">
            <summary>
                Mouse button 4.
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Button5">
            <summary>
                Mouse button 4.
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Button6">
            <summary>
                Mouse button 5.
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Button7">
            <summary>
                Mouse button 6.
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Button8">
            <summary>
                Mouse button 7.
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Left">
            <summary>
                The left mouse button.
                <para>Same as <see cref="F:GLFW.MouseButton.Button1" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Right">
            <summary>
                The right mouse button.
                <para>Same as <see cref="F:GLFW.MouseButton.Button2" />.</para>
            </summary>
        </member>
        <member name="F:GLFW.MouseButton.Middle">
            <summary>
                The middle mouse button.
                <para>Same as <see cref="F:GLFW.MouseButton.Button3" />.</para>
            </summary>
        </member>
        <member name="T:GLFW.Profile">
            <summary>
                Strongly-typed values used for getting/setting window hints.
                <para>If OpenGL ES is requested, this hint is ignored.</para>
            </summary>
        </member>
        <member name="F:GLFW.Profile.Any">
            <summary>
                Indicates no preference on profile.
                <para>If requesting an OpenGL version below 3.2, this profile must be used.</para>
            </summary>
        </member>
        <member name="F:GLFW.Profile.Core">
            <summary>
                Indicates OpenGL Core profile.
                <para>Only if requested OpenGL is greater than 3.2.</para>
            </summary>
        </member>
        <member name="F:GLFW.Profile.Compatibility">
            <summary>
                Indicates OpenGL Compatibility profile.
                <para>Only if requested OpenGL is greater than 3.2.</para>
            </summary>
        </member>
        <member name="T:GLFW.ReleaseBehavior">
            <summary>
                Describes the release behavior to be used by the context.
            </summary>
        </member>
        <member name="F:GLFW.ReleaseBehavior.Any">
            <summary>
                The default behavior of the context creation API will be used.
            </summary>
        </member>
        <member name="F:GLFW.ReleaseBehavior.Flush">
            <summary>
                The pipeline will be flushed whenever the context is released from being the current one.
            </summary>
        </member>
        <member name="F:GLFW.ReleaseBehavior.None">
            <summary>
                The pipeline will not be flushed on release.
            </summary>
        </member>
        <member name="T:GLFW.Robustness">
            <summary>
                Describes the robustness strategy to be used by the context.
            </summary>
        </member>
        <member name="F:GLFW.Robustness.None">
            <summary>
                Disabled/no strategy (default)
            </summary>
        </member>
        <member name="F:GLFW.Robustness.NoResetNotification">
            <summary>
                No notification.
            </summary>
        </member>
        <member name="F:GLFW.Robustness.LoseContextOnReset">
            <summary>
                The context is lost on reset, use glGetGraphicsResetStatus for more information.
            </summary>
        </member>
        <member name="T:GLFW.WindowAttribute">
            <summary>
                Strongly-typed values used for getting/setting window hints.
            </summary>
        </member>
        <member name="F:GLFW.WindowAttribute.Focused">
            <summary>
                Indicates whether the windowed mode window will be given input focus when created.
                <para>This hint is ignored for full screen and initially hidden windows.</para>
            </summary>
        </member>
        <member name="F:GLFW.WindowAttribute.AutoIconify">
            <summary>
                Indicates whether the full screen window will automatically iconify and restore the previous video mode on input
                focus loss.
                <para>This hint is ignored for windowed mode windows.</para>
            </summary>
        </member>
        <member name="F:GLFW.WindowAttribute.Maximized">
            <summary>
                Indicates whether the windowed mode window will be maximized when created.
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:GLFW.WindowAttribute.Visible">
            <summary>
                Indicates whether the windowed mode window will be initially visible.
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:GLFW.WindowAttribute.Resizable">
            <summary>
                Indicates whether the windowed mode window will be resizable by the <i>user</i>.
                <para>The window will still be resizable using the <see cref="M:GLFW.Glfw.SetWindowSize(GLFW.Window,System.Int32,System.Int32)" /> function.</para>
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:GLFW.WindowAttribute.Decorated">
            <summary>
                Indicates whether the windowed mode window will have window decorations such as a border, a close widget, etc.
                <para>An undecorated window may still allow the user to generate close events on some platforms.</para>
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:GLFW.WindowAttribute.Floating">
            <summary>
                Indicates whether the windowed mode window will be floating above other regular windows, also called topmost or
                always-on-top.
                <para>This is intended primarily for debugging purposes and cannot be used to implement proper full screen windows.</para>
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:GLFW.WindowAttribute.MouseHover">
            <summary>
                Indicates whether the cursor is currently directly over the content area of the window, with no other
                windows between.
            </summary>
        </member>
        <member name="T:GLFW.Exception">
            <summary>
            Base exception class for GLFW related errors.
            </summary>
        </member>
        <member name="M:GLFW.Exception.GetErrorMessage(GLFW.ErrorCode)">
            <summary>
                Generic error messages if only an error code is supplied as an argument to the constructor.
            </summary>
            <param name="code">The error code.</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:GLFW.Exception.#ctor(GLFW.ErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.Exception" /> class.
            </summary>
            <param name="error">The error code to create a generic message from.</param>
        </member>
        <member name="M:GLFW.Exception.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.Exception" /> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:GLFW.FileDropEventArgs">
            <summary>
                Arguments supplied with file drag-drop events.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:GLFW.FileDropEventArgs.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.FileDropEventArgs" /> class.
            </summary>
            <param name="filenames">The dropped filenames.</param>
        </member>
        <member name="P:GLFW.FileDropEventArgs.Filenames">
            <summary>
                Gets the filenames of the dropped files.
            </summary>
            <value>
                The filenames.
            </value>
        </member>
        <member name="T:GLFW.Game.GameWindow">
            <inheritdoc cref="T:GLFW.NativeWindow"/>
        </member>
        <member name="M:GLFW.Game.GameWindow.#ctor">
            <inheritdoc cref="M:GLFW.NativeWindow.#ctor"/>
        </member>
        <member name="M:GLFW.Game.GameWindow.#ctor(System.Int32,System.Int32,System.String)">
            <inheritdoc cref="M:GLFW.NativeWindow.#ctor(System.Int32,System.Int32,System.String)"/>
        </member>
        <member name="M:GLFW.Game.GameWindow.#ctor(System.Int32,System.Int32,System.String,GLFW.Monitor,GLFW.Window)">
            <inheritdoc cref="M:GLFW.NativeWindow.#ctor(System.Int32,System.Int32,System.String,GLFW.Monitor,GLFW.Window)"/>
        </member>
        <member name="T:GLFW.Glfw">
            <summary>
                The base class the vast majority of the GLFW functions, excluding only Vulkan and native platform specific
                functions.
            </summary>
        </member>
        <member name="F:GLFW.Glfw.LIBRARY">
            <summary>
                The native library name,
                <para>For Unix users using an installed version of GLFW, this needs refactored to <c>glfw</c>.</para>
            </summary>
        </member>
        <member name="M:GLFW.Glfw.GetError(System.String@)">
            <summary>
                Returns and clears the error code of the last error that occurred on the calling thread, and optionally
                a description of it.
                <para>
                    If no error has occurred since the last call, it returns <see cref="F:GLFW.ErrorCode.None" /> and the
                    description pointer is set to <c>null</c>.
                </para>
            </summary>
            <param name="description">The description string, or <c>null</c> if there is no error.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetMonitorContentScale(System.IntPtr,System.Single@,System.Single@)">
            <summary>
                Retrieves the content scale for the specified monitor. The content scale is the ratio between the
                current DPI and the platform's default DPI.
                <para>
                    This is especially important for text and any UI elements. If the pixel dimensions of your UI scaled by
                    this look appropriate on your machine then it should appear at a reasonable size on other machines
                    regardless of their DPI and scaling settings. This relies on the system DPI and scaling settings being
                    somewhat correct.
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="xScale">The scale on the x-axis.</param>
            <param name="yScale">The scale on the y-axis.</param>
        </member>
        <member name="M:GLFW.Glfw.GetMonitorUserPointer(System.IntPtr)">
            <summary>
                Returns the current value of the user-defined pointer of the specified <paramref name="monitor" />.
            </summary>
            <param name="monitor">The monitor whose pointer to return.</param>
            <returns>The user-pointer, or <see cref="F:System.IntPtr.Zero" /> if none is defined.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetMonitorUserPointer(System.IntPtr,System.IntPtr)">
            <summary>
                This function sets the user-defined pointer of the specified <paramref name="monitor" />.
                <para>The current value is retained until the monitor is disconnected.</para>
            </summary>
            <param name="monitor">The monitor whose pointer to set.</param>
            <param name="pointer">The user-defined pointer value.</param>
        </member>
        <member name="M:GLFW.Glfw.GetWindowOpacity(System.IntPtr)">
            <summary>
                Returns the opacity of the window, including any decorations.
            </summary>
            <param name="window">The window to query.</param>
            <returns>The opacity value of the specified window, a value between <c>0.0</c> and <c>1.0</c> inclusive.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowOpacity(System.IntPtr,System.Single)">
            <summary>
                Sets the opacity of the window, including any decorations.
                <para>
                    The opacity (or alpha) value is a positive finite number between zero and one, where zero is fully
                    transparent and one is fully opaque.
                </para>
            </summary>
            <param name="window">The window to set the opacity for.</param>
            <param name="opacity">The desired opacity of the specified window.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHintString(GLFW.Hint,System.Byte[])">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values until
                changed by a call to this function or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the library is terminated.
                <para>
                    Some hints are platform specific. These may be set on any platform but they will only affect their
                    specific platform. Other platforms will ignore them. Setting these hints requires no platform specific
                    headers or functions.
                </para>
            </summary>
            <param name="hint">The window hit to set.</param>
            <param name="value">The new value of the window hint.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHintStringUTF8(GLFW.Hint,System.String)">
            <summary>
                Helper function to call <see cref="M:GLFW.Glfw.WindowHintString(GLFW.Hint,System.Byte[])" /> with UTF-8 encoding.
            </summary>
            <param name="hint">The window hit to set.</param>
            <param name="value">The new value of the window hint.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHintStringASCII(GLFW.Hint,System.String)">
            <summary>
                Helper function to call <see cref="M:GLFW.Glfw.WindowHintString(GLFW.Hint,System.Byte[])" /> with ASCII encoding.
            </summary>
            <param name="hint">The window hit to set.</param>
            <param name="value">The new value of the window hint.</param>
        </member>
        <member name="M:GLFW.Glfw.GetWindowContentScale(System.IntPtr,System.Single@,System.Single@)">
            <summary>
                Retrieves the content scale for the specified window. The content scale is the ratio between the current DPI and
                the platform's default DPI. This is especially important for text and any UI elements. If the pixel dimensions of
                your UI scaled by this look appropriate on your machine then it should appear at a reasonable size on other
                machines regardless of their DPI and scaling settings. This relies on the system DPI and scaling settings being
                somewhat correct.
                <para>
                    On systems where each monitors can have its own content scale, the window content scale will depend on which
                    monitor the system considers the window to be on.
                </para>
            </summary>
            <param name="window">The window to query.</param>
            <param name="xScale">The content scale on the x-axis.</param>
            <param name="yScale">The content scale on the y-axis.</param>
        </member>
        <member name="M:GLFW.Glfw.RequestWindowAttention(System.IntPtr)">
            <summary>
                Requests user attention to the specified <paramref name="window" />. On platforms where this is not supported,
                attention is
                requested to the application as a whole.
                <para>
                    Once the user has given attention, usually by focusing the window or application, the system will end the
                    request automatically.
                </para>
            </summary>
            <param name="window">The window to request user attention to.</param>
        </member>
        <member name="M:GLFW.Glfw.RawMouseMotionSupported">
            <summary>
                This function returns whether raw mouse motion is supported on the current system.
                <para>
                    This status does not change after GLFW has been initialized so you only need to check this once. If you
                    attempt to enable raw motion on a system that does not support it, an error will be emitted.
                </para>
            </summary>
            <returns><c>true</c> if raw mouse motion is supported on the current machine, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowMaximizeCallback(System.IntPtr,GLFW.WindowMaximizedCallback)">
            <summary>
                Sets the maximization callback of the specified <paramref name="window,," /> which is called when the window is
                maximized or restored.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="cb">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowContentScaleCallback(System.IntPtr,GLFW.WindowContentsScaleCallback)">
            <summary>
                Sets the window content scale callback of the specified window, which is called when the content scale of the
                specified window changes.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="cb">The new callback, or <c>null</c> to remove the currently set callback</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetKeyScanCode(GLFW.Keys)">
            <summary>
                Returns the platform-specific scan-code of the specified key.
                <para>If the key is <see cref="F:GLFW.Keys.Unknown" /> or does not exist on the keyboard this method will return -1.</para>
            </summary>
            <param name="key">The named key to query.</param>
            <returns>The platform-specific scan-code for the key, or -1 if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowAttribute(System.IntPtr,GLFW.WindowAttribute,System.Boolean)">
            <summary>
                Sets the value of an attribute of the specified window.
            </summary>
            <param name="window">
                The window to set the attribute for
                <para>Valid attributes include:</para>
                <para>
                    <see cref="F:GLFW.WindowAttribute.Decorated" />
                </para>
                <para>
                    <see cref="F:GLFW.WindowAttribute.Resizable" />
                </para>
                <para>
                    <see cref="F:GLFW.WindowAttribute.Floating" />
                </para>
                <para>
                    <see cref="F:GLFW.WindowAttribute.AutoIconify" />
                </para>
                <para>
                    <see cref="F:GLFW.WindowAttribute.Focused" />
                </para>
            </param>
            <param name="attr">A supported window attribute.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:GLFW.Glfw.GetJoystickHats(System.Int32)">
            <summary>
                Returns the state of all hats of the specified joystick as a bitmask.
            </summary>
            <param name="joystickId">The joystick to query.</param>
            <returns>A bitmask enumeration containing the state of the joystick hats.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetJoystickGuid(System.Int32)">
            <summary>
                Returns the SDL compatible GUID, as a hexadecimal string, of the specified joystick.
                <para>
                    The GUID is what connects a joystick to a gamepad mapping. A connected joystick will always have a GUID even
                    if there is no gamepad mapping assigned to it.
                </para>
            </summary>
            <param name="joystickId">The joystick to query.</param>
            <returns>The GUID of the joystick, or <c>null</c> if the joystick is not present or an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetJoystickUserPointer(System.Int32)">
            <summary>
                This function returns the current value of the user-defined pointer of the specified joystick.
            </summary>
            <param name="joystickId">The joystick whose pointer to return.</param>
            <returns>The user-defined pointer, or <see cref="F:System.IntPtr.Zero" /> if never defined.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetJoystickUserPointer(System.Int32,System.IntPtr)">
            <summary>
                This function sets the user-defined pointer of the specified joystick.
                <para>The current value is retained until the joystick is disconnected.</para>
            </summary>
            <param name="joystickId">The joystick whose pointer to set.</param>
            <param name="pointer">The new value.</param>
        </member>
        <member name="M:GLFW.Glfw.JoystickIsGamepad(System.Int32)">
            <summary>
                Returns whether the specified joystick is both present and has a gamepad mapping.
            </summary>
            <param name="joystickId">The joystick to query.</param>
            <returns><c>true</c> if a joystick is both present and has a gamepad mapping, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GLFW.Glfw.UpdateGamepadMappings(System.String)">
            <summary>
                Parses the specified string and updates the internal list with any gamepad mappings it finds.
                <para>
                    This string may contain either a single gamepad mapping or many mappings separated by newlines. The parser
                    supports the full format of the SDL <c>gamecontrollerdb.txt</c> source file including empty lines and comments.
                </para>
            </summary>
            <param name="mappings">The string containing the gamepad mappings.</param>
            <returns><c>true</c> if successful, or <c>false</c> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetGamepadName(System.Int32)">
            <summary>
                Returns the human-readable name of the gamepad from the gamepad mapping assigned to the specified joystick.
            </summary>
            <param name="gamepadId">The joystick to query.</param>
            <returns>
                The name of the gamepad, or <c>null</c> if the joystick is not present, does not have a mapping or an error
                occurred.
            </returns>
        </member>
        <member name="M:GLFW.Glfw.GetGamepadState(System.Int32,GLFW.GamePadState@)">
            <summary>
                Retrieves the state of the specified joystick remapped to an Xbox-like gamepad.
            </summary>
            <param name="id">The joystick to query.</param>
            <param name="state">The gamepad input state of the joystick.</param>
            <returns>
                <c>true</c> if successful, or <c>false</c> if no joystick is connected, it has no gamepad mapping or an error
                occurred.
            </returns>
        </member>
        <member name="P:GLFW.Glfw.CurrentContext">
            <summary>
                Gets the window whose OpenGL or OpenGL ES context is current on the calling thread, or <see cref="F:GLFW.Window.None" />
                if no context is current.
            </summary>
            <value>
                The current context.
            </value>
        </member>
        <member name="P:GLFW.Glfw.Monitors">
            <summary>
                Gets an array of handles for all currently connected monitors.
                <para>The primary monitor is always first in the array.</para>
            </summary>
            <value>
                The monitors.
            </value>
        </member>
        <member name="P:GLFW.Glfw.PrimaryMonitor">
            <summary>
                Gets the primary monitor. This is usually the monitor where elements like the task bar or global menu bar are
                located.
            </summary>
            <value>
                The primary monitor, or <see cref="F:GLFW.Monitor.None" /> if no monitors were found or if an error occurred.
            </value>
        </member>
        <member name="P:GLFW.Glfw.Time">
            <summary>
                Gets or sets the value of the GLFW timer.
                <para>
                    The resolution of the timer is system dependent, but is usually on the order of a few micro- or nanoseconds.
                    It uses the highest-resolution monotonic time source on each supported platform.
                </para>
            </summary>
            <value>
                The time.
            </value>
        </member>
        <member name="P:GLFW.Glfw.TimerFrequency">
            <summary>
                Gets the frequency, in Hz, of the raw timer.
            </summary>
            <value>
                The frequency of the timer, in Hz, or zero if an error occurred.
            </value>
        </member>
        <member name="P:GLFW.Glfw.TimerValue">
            <summary>
                Gets the current value of the raw timer, measured in 1 / frequency seconds.
            </summary>
            <value>
                The timer value.
            </value>
        </member>
        <member name="P:GLFW.Glfw.Version">
            <summary>
                Gets the version of the native GLFW library.
            </summary>
            <value>
                The version.
            </value>
        </member>
        <member name="P:GLFW.Glfw.VersionString">
            <summary>
                Gets the compile-time generated version string of the GLFW library binary.
                <para>It describes the version, platform, compiler and any platform-specific compile-time options.</para>
            </summary>
            <value>
                The version string.
            </value>
        </member>
        <member name="M:GLFW.Glfw.InitHint(GLFW.Hint,System.Boolean)">
            <summary>
                This function sets hints for the next initialization of GLFW.
                <para>
                    The values you set hints to are never reset by GLFW, but they only take effect during initialization.
                    Once GLFW has been initialized, any values you set will be ignored until the library is terminated and
                    initialized again.>.
                </para>
            </summary>
            <param name="hint">
                The hint, valid values are <see cref="F:GLFW.Hint.JoystickHatButtons" />,
                <see cref="F:GLFW.Hint.CocoaMenuBar" />, and <see cref="F:GLFW.Hint.CocoaChDirResources" />.
            </param>
            <param name="value">The value of the hint.</param>
        </member>
        <member name="M:GLFW.Glfw.Init">
            <summary>
                This function initializes the GLFW library. Before most GLFW functions can be used, GLFW must be initialized, and
                before an application terminates GLFW should be terminated in order to free any resources allocated during or after
                initialization.
                <para>
                    If this function fails, it calls <see cref="M:GLFW.Glfw.Terminate" /> before returning. If it succeeds, you should call
                    <see cref="M:GLFW.Glfw.Terminate" /> before the application exits
                </para>
                <para>
                    Additional calls to this function after successful initialization but before termination will return
                    <c>true</c> immediately.
                </para>
            </summary>
            <returns><c>true</c> if successful, or <c>false</c> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.Terminate">
            <summary>
                This function destroys all remaining windows and cursors, restores any modified gamma ramps and frees any other
                allocated resources. Once this function is called, you must again call <see cref="M:GLFW.Glfw.Init" /> successfully before you
                will be able to use most GLFW functions.
                If GLFW has been successfully initialized, this function should be called before the application exits. If
                initialization fails, there is no need to call this function, as it is called by <see cref="M:GLFW.Glfw.Init" /> before it
                returns failure.
            </summary>
            <note type="warning">
                The contexts of any remaining windows must not be current on any other thread when this function
                is called.
            </note>
        </member>
        <member name="M:GLFW.Glfw.SetErrorCallback(GLFW.ErrorCallback)">
            <summary>
                Sets the error callback, which is called with an error code and a human-readable description each
                time a GLFW error occurs.
            </summary>
            <param name="errorHandler">The callback function, or <c>null</c> to unbind this callback.</param>
            <returns>The previously set callback function, or <c>null</c> if no callback was already set.</returns>
        </member>
        <member name="M:GLFW.Glfw.DestroyWindow(GLFW.Window)">
            <summary>
                This function destroys the specified window and its context. On calling this function, no further callbacks will be
                called for that window.
                <para>If the context of the specified window is current on the main thread, it is detached before being destroyed.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:GLFW.Glfw.ShowWindow(GLFW.Window)">
            <summary>
                This function makes the specified window visible if it was previously hidden. If the window is already visible or
                is in full screen mode, this function does nothing.
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:GLFW.Glfw.HideWindow(GLFW.Window)">
            <summary>
                This function hides the specified window if it was previously visible. If the window is already hidden or is in
                full screen mode, this function does nothing.
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:GLFW.Glfw.GetWindowPosition(GLFW.Window,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the position, in screen coordinates, of the upper-left corner of the client area of the
                specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="x">The x-coordinate of the upper-left corner of the client area.</param>
            <param name="y">The y-coordinate of the upper-left corner of the client area.</param>
        </member>
        <member name="M:GLFW.Glfw.SetWindowPosition(GLFW.Window,System.Int32,System.Int32)">
            <summary>
                Sets the position, in screen coordinates, of the upper-left corner of the client area of the
                specified windowed mode window.
                <para>If the window is a full screen window, this function does nothing.</para>
            </summary>
            <note type="important">
                Do not use this function to move an already visible window unless you have very good reasons for
                doing so, as it will confuse and annoy the user.
            </note>
            <param name="window">A window instance.</param>
            <param name="x">The x-coordinate of the upper-left corner of the client area.</param>
            <param name="y">The y-coordinate of the upper-left corner of the client area.</param>
            <remarks>
                The window manager may put limits on what positions are allowed. GLFW cannot and should not override these
                limits.
            </remarks>
        </member>
        <member name="M:GLFW.Glfw.GetWindowSize(GLFW.Window,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the size, in screen coordinates, of the client area of the specified window.
                <para>
                    If you wish to retrieve the size of the framebuffer of the window in pixels, use
                    <see cref="M:GLFW.Glfw.GetFramebufferSize(GLFW.Window,System.Int32@,System.Int32@)" />.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="width">The width, in screen coordinates.</param>
            <param name="height">The height, in screen coordinates.</param>
        </member>
        <member name="M:GLFW.Glfw.SetWindowSize(GLFW.Window,System.Int32,System.Int32)">
            <summary>
                Sets the size, in screen coordinates, of the client area of the specified window.
                <para>
                    For full screen windows, this function updates the resolution of its desired video mode and switches to the
                    video mode closest to it, without affecting the window's context. As the context is unaffected, the bit depths
                    of the framebuffer remain unchanged.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="width">The desired width, in screen coordinates, of the window client area.</param>
            <param name="height">The desired height, in screen coordinates, of the window client area.</param>
            <remarks>The window manager may put limits on what sizes are allowed. GLFW cannot and should not override these limits.</remarks>
        </member>
        <member name="M:GLFW.Glfw.GetFramebufferSize(GLFW.Window,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the size, in pixels, of the framebuffer of the specified window.
                <para>If you wish to retrieve the size of the window in screen coordinates, use <see cref="M:GLFW.Glfw.GetWindowSize(GLFW.Window,System.Int32@,System.Int32@)" />.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="width">The width, in pixels, of the framebuffer.</param>
            <param name="height">The height, in pixels, of the framebuffer.</param>
        </member>
        <member name="M:GLFW.Glfw.SetWindowPositionCallback(GLFW.Window,GLFW.PositionCallback)">
            <summary>
                Sets the position callback of the specified window, which is called when the window is moved.
                <para>The callback is provided with the screen position of the upper-left corner of the client area of the window.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="positionCallback">The position callback to be invoked on position changes.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowSizeCallback(GLFW.Window,GLFW.SizeCallback)">
            <summary>
                Sets the size callback of the specified window, which is called when the window is resized.
                <para>The callback is provided with the size, in screen coordinates, of the client area of the window.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="sizeCallback">The size callback to be invoked on size changes.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowTitle(GLFW.Window,System.Byte[])">
            <summary>
                Sets the window title, encoded as UTF-8, of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="title">The title as an array of UTF-8 encoded bytes.</param>
        </member>
        <member name="M:GLFW.Glfw.FocusWindow(GLFW.Window)">
            <summary>
                This function brings the specified window to front and sets input focus. The window should already be visible and
                not iconified.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:GLFW.Glfw.SetWindowFocusCallback(GLFW.Window,GLFW.FocusCallback)">
            <summary>
                Sets the focus callback of the specified window, which is called when the window gains or loses input
                focus.
                <para>
                    After the focus callback is called for a window that lost input focus, synthetic key and mouse button release
                    events will be generated for all such that had been pressed.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="focusCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
        </member>
        <member name="M:GLFW.Glfw.GetVersion(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the major, minor and revision numbers of the GLFW library.
                <para>
                    It is intended for when you are using GLFW as a shared library and want to ensure that you are using the
                    minimum required version.
                </para>
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="revision">The revision.</param>
            <seealso cref="P:GLFW.Glfw.Version" />
        </member>
        <member name="M:GLFW.Glfw.GetVersionString">
            <summary>
                Gets the compile-time generated version string of the GLFW library binary.
                <para>It describes the version, platform, compiler and any platform-specific compile-time options.</para>
            </summary>
            <returns>A pointer to the null-terminated UTF-8 encoded version string.</returns>
            <seealso cref="P:GLFW.Glfw.VersionString" />
        </member>
        <member name="M:GLFW.Glfw.GetWindowFrameSize(GLFW.Window,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the size, in screen coordinates, of each edge of the frame of the specified window.
                <para>
                    This size includes the title bar, if the window has one. The size of the frame may vary depending on the
                    window-related hints used to create it.
                </para>
                <para>
                    Because this function retrieves the size of each window frame edge and not the offset along a particular
                    coordinate axis, the retrieved values will always be zero or positive.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="left">The size, in screen coordinates, of the left edge of the window frame</param>
            <param name="top">The size, in screen coordinates, of the top edge of the window frame</param>
            <param name="right">The size, in screen coordinates, of the right edge of the window frame.</param>
            <param name="bottom">The size, in screen coordinates, of the bottom edge of the window frame</param>
        </member>
        <member name="M:GLFW.Glfw.MaximizeWindow(GLFW.Window)">
            <summary>
                This function maximizes the specified window if it was previously not maximized. If the window is already
                maximized, this function does nothing.
                <para>If the specified window is a full screen window, this function does nothing.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:GLFW.Glfw.IconifyWindow(GLFW.Window)">
            <summary>
                This function iconifies (minimizes) the specified window if it was previously restored.
                <para>If the window is already iconified, this function does nothing.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:GLFW.Glfw.RestoreWindow(GLFW.Window)">
            <summary>
                This function restores the specified window if it was previously iconified (minimized) or maximized.
                <para>If the window is already restored, this function does nothing.</para>
                <para>
                    If the specified window is a full screen window, the resolution chosen for the window is restored on the
                    selected monitor.
                </para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:GLFW.Glfw.MakeContextCurrent(GLFW.Window)">
            <summary>
                This function makes the OpenGL or OpenGL ES context of the specified window current on the calling thread.
                <para>
                    A context can only be made current on a single thread at a time and each thread can have only a single
                    current context at a time.
                </para>
                <para>By default, making a context non-current implicitly forces a pipeline flush.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:GLFW.Glfw.SwapBuffers(GLFW.Window)">
            <summary>
                This function swaps the front and back buffers of the specified window when rendering with OpenGL or OpenGL ES.
                <para>
                    If the swap interval is greater than zero, the GPU driver waits the specified number of screen updates before
                    swapping the buffers.
                </para>
                <para>This function does not apply to Vulkan.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:GLFW.Glfw.SwapInterval(System.Int32)">
            <summary>
                Sets the swap interval for the current OpenGL or OpenGL ES context, i.e. the number of screen updates
                to wait from the time <see cref="M:GLFW.Glfw.SwapBuffers(GLFW.Window)" /> was called before swapping the buffers and returning.
                <para>This is sometimes called vertical synchronization, vertical retrace synchronization or just vsync.</para>
                <para>
                    A context must be current on the calling thread. Calling this function without a current context will cause
                    an exception.
                </para>
                <para>
                    This function does not apply to Vulkan. If you are rendering with Vulkan, see the present mode of your
                    swapchain instead.
                </para>
            </summary>
            <param name="interval">
                The minimum number of screen updates to wait for until the buffers are swapped by
                <see cref="M:GLFW.Glfw.SwapBuffers(GLFW.Window)" />.
            </param>
        </member>
        <member name="M:GLFW.Glfw.GetExtensionSupported(System.Byte[])">
            <summary>
                Gets whether the specified API extension is supported by the current OpenGL or OpenGL ES context.
                <para>It searches both for client API extension and context creation API extensions.</para>
            </summary>
            <param name="extension">The extension name as an array of ASCII encoded bytes.</param>
            <returns><c>true</c> if the extension is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.Glfw.DefaultWindowHints">
            <summary>
                This function resets all window hints to their default values.
            </summary>
        </member>
        <member name="M:GLFW.Glfw.WindowShouldClose(GLFW.Window)">
            <summary>
                Gets the value of the close flag of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns><c>true</c> if close flag is present; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowShouldClose(GLFW.Window,System.Boolean)">
            <summary>
                Sets the value of the close flag of the specified window.
                <para>This can be used to override the user's attempt to close the window, or to signal that it should be closed.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="close"><c>true</c> to set close flag, or <c>false</c> to cancel flag.</param>
        </member>
        <member name="M:GLFW.Glfw.SetWindowIcon(GLFW.Window,System.Int32,GLFW.Image[])">
            <summary>
                Sets the icon of the specified window. If passed an array of candidate images, those of or closest to
                the sizes desired by the system are selected. If no images are specified, the window reverts to its default icon.
                <para>
                    The desired image sizes varies depending on platform and system settings. The selected images will be
                    rescaled as needed. Good sizes include 16x16, 32x32 and 48x48.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="count">The number of images in <paramref name="images" />.</param>
            <param name="images">An array of icon images.</param>
        </member>
        <member name="M:GLFW.Glfw.WaitEvents">
            <summary>
                This function puts the calling thread to sleep until at least one event is available in the event queue. Once one
                or more events are available, it behaves exactly like glfwPollEvents, i.e. the events in the queue are processed
                and the function then returns immediately. Processing events will cause the window and input callbacks associated
                with those events to be called.
                <para>
                    Since not all events are associated with callbacks, this function may return without a callback having been
                    called even if you are monitoring all callbacks.
                </para>
                <para>
                    On some platforms, a window move, resize or menu operation will cause event processing to block. This is due
                    to how event processing is designed on those platforms. You can use the window refresh callback to redraw the
                    contents of your window when necessary during such operations.
                </para>
            </summary>
        </member>
        <member name="M:GLFW.Glfw.PollEvents">
            <summary>
                This function processes only those events that are already in the event queue and then returns immediately.
                Processing events will cause the window and input callbacks associated with those events to be called.
                <para>
                    On some platforms, a window move, resize or menu operation will cause event processing to block. This is due
                    to how event processing is designed on those platforms. You can use the window refresh callback to redraw the
                    contents of your window when necessary during such operations.
                </para>
                <para>
                    On some platforms, certain events are sent directly to the application without going through the event queue,
                    causing callbacks to be called outside of a call to one of the event processing functions.
                </para>
            </summary>
        </member>
        <member name="M:GLFW.Glfw.PostEmptyEvent">
            <summary>
                This function posts an empty event from the current thread to the event queue, causing <see cref="M:GLFW.Glfw.WaitEvents" /> or
                <see cref="M:GLFW.Glfw.WaitEventsTimeout(System.Double)" /> to return.
            </summary>
        </member>
        <member name="M:GLFW.Glfw.WaitEventsTimeout(System.Double)">
            <summary>
                This function puts the calling thread to sleep until at least one event is available in the event queue, or until
                the specified timeout is reached. If one or more events are available, it behaves exactly like
                <see cref="M:GLFW.Glfw.PollEvents" />, i.e. the events in the queue are processed and the function then returns immediately.
                Processing events will cause the window and input callbacks associated with those events to be called.
                <para>The timeout value must be a positive finite number.</para>
                <para>
                    Since not all events are associated with callbacks, this function may return without a callback having been
                    called even if you are monitoring all callbacks.
                </para>
                <para>
                    On some platforms, a window move, resize or menu operation will cause event processing to block. This is due
                    to how event processing is designed on those platforms. You can use the window refresh callback to redraw the
                    contents of your window when necessary during such operations.
                </para>
            </summary>
            <param name="timeout">The maximum amount of time, in seconds, to wait.</param>
        </member>
        <member name="M:GLFW.Glfw.SetCloseCallback(GLFW.Window,GLFW.WindowCallback)">
            <summary>
                Sets the close callback of the specified window, which is called when the user attempts to close the
                window, for example by clicking the close widget in the title bar.
            </summary>
            <param name="window">A window instance.</param>
            <param name="closeCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetWindowMonitor(GLFW.Window)">
            <summary>
                Gets the handle of the monitor that the specified window is in full screen on.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The monitor, or <see cref="F:GLFW.Monitor.None" /> if the window is in windowed mode or an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowMonitor(GLFW.Window,GLFW.Monitor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the monitor that the window uses for full screen mode or, if the monitor is
                <see cref="F:GLFW.Monitor.None" />, makes it windowed mode.
                <para>
                    When setting a monitor, this function updates the width, height and refresh rate of the desired video mode
                    and switches to the video mode closest to it. The window position is ignored when setting a monitor.
                </para>
                <para>
                    When the monitor is <see cref="F:GLFW.Monitor.None" />, the position, width and height are used to place the window
                    client area. The refresh rate is ignored when no monitor is specified.
                </para>
                <para>
                    If you only wish to update the resolution of a full screen window or the size of a windowed mode window, use
                    <see cref="M:GLFW.Glfw.SetWindowSize(GLFW.Window,System.Int32,System.Int32)" />.
                </para>
                <para>
                    When a window transitions from full screen to windowed mode, this function restores any previous window
                    settings such as whether it is decorated, floating, resizable, has size or aspect ratio limits, etc..
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="monitor">The desired monitor, or <see cref="F:GLFW.Monitor.None" /> to set windowed mode.</param>
            <param name="x">The desired x-coordinate of the upper-left corner of the client area.</param>
            <param name="y">The desired y-coordinate of the upper-left corner of the client area.</param>
            <param name="width">The desired width, in screen coordinates, of the client area or video mode.</param>
            <param name="height">The desired height, in screen coordinates, of the client area or video mode.</param>
            <param name="refreshRate">The desired refresh rate, in Hz, of the video mode, or <see cref="F:GLFW.Constants.Default" />.</param>
        </member>
        <member name="M:GLFW.Glfw.SetGammaRamp(GLFW.Monitor,GLFW.GammaRamp)">
            <summary>
                Sets the current gamma ramp for the specified monitor.
                <para>
                    The original gamma ramp for that monitor is saved by GLFW the first time this function is called and is
                    restored by <see cref="M:GLFW.Glfw.Terminate" />.
                </para>
                <para>WARNING: Gamma ramps with sizes other than 256 are not supported on some platforms (Windows).</para>
            </summary>
            <param name="monitor">The monitor whose gamma ramp to set.</param>
            <param name="gammaRamp">The gamma ramp to use.</param>
        </member>
        <member name="M:GLFW.Glfw.SetGamma(GLFW.Monitor,System.Single)">
            <summary>
                This function generates a 256-element gamma ramp from the specified exponent and then calls
                <see cref="M:GLFW.Glfw.SetGammaRamp(GLFW.Monitor,GLFW.GammaRamp)" /> with it.
                <para>The value must be a finite number greater than zero.</para>
            </summary>
            <param name="monitor">The monitor whose gamma ramp to set.</param>
            <param name="gamma">The desired exponent.</param>
        </member>
        <member name="M:GLFW.Glfw.SetDropCallback(GLFW.Window,GLFW.FileDropCallback)">
            <summary>
                Sets the file drop callback of the specified window, which is called when one or more dragged files
                are dropped on the window.
                <para>
                    Because the path array and its strings may have been generated specifically for that event, they are not
                    guaranteed to be valid after the callback has returned. If you wish to use them after the callback returns, you
                    need to make a deep copy.
                </para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="dropCallback">The new file drop callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.CreateCursor(GLFW.Image,System.Int32,System.Int32)">
            <summary>
                Creates a new custom cursor image that can be set for a window with glfwSetCursor.
                <para>
                    The cursor can be destroyed with <see cref="M:GLFW.Glfw.DestroyCursor(GLFW.Cursor)" />. Any remaining cursors are destroyed by
                    <see cref="M:GLFW.Glfw.Terminate" />.
                </para>
                <para>
                    The pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight bits per channel. They are arranged
                    canonically as packed sequential rows, starting from the top-left corner.
                </para>
                <para>
                    The cursor hotspot is specified in pixels, relative to the upper-left corner of the cursor image. Like all
                    other coordinate systems in GLFW, the X-axis points to the right and the Y-axis points down.
                </para>
            </summary>
            <param name="image">The image.</param>
            <param name="xHotspot">The x hotspot.</param>
            <param name="yHotspot">The y hotspot.</param>
            <returns>The created cursor.</returns>
        </member>
        <member name="M:GLFW.Glfw.DestroyCursor(GLFW.Cursor)">
            <summary>
                This function destroys a cursor previously created with <see cref="M:GLFW.Glfw.CreateCursor(GLFW.Image,System.Int32,System.Int32)" />. Any remaining cursors will be
                destroyed by <see cref="M:GLFW.Glfw.Terminate" />.
            </summary>
            <param name="cursor">The cursor object to destroy.</param>
        </member>
        <member name="M:GLFW.Glfw.SetCursor(GLFW.Window,GLFW.Cursor)">
            <summary>
                Sets the cursor image to be used when the cursor is over the client area of the specified window.
                <para>The set cursor will only be visible when the cursor mode of the window is <see cref="F:GLFW.CursorMode.Normal" />.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="cursor">The cursor to set, or <see cref="F:GLFW.Cursor.None" /> to switch back to the default arrow cursor.</param>
        </member>
        <member name="M:GLFW.Glfw.CreateStandardCursor(GLFW.CursorType)">
            <summary>
                Returns a cursor with a standard shape, that can be set for a window with <see cref="M:GLFW.Glfw.SetCursor(GLFW.Window,GLFW.Cursor)" />.
            </summary>
            <param name="type">The type of cursor to create.</param>
            <returns>A new cursor ready to use or <see cref="F:GLFW.Cursor.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetCursorPosition(GLFW.Window,System.Double@,System.Double@)">
            <summary>
                Gets the position of the cursor, in screen coordinates, relative to the upper-left corner of the
                client area of the specified window
                <para>
                    If the cursor is disabled then the cursor position is unbounded and limited only by the minimum and maximum
                    values of a double.
                </para>
                <para>
                    The coordinate can be converted to their integer equivalents with the floor function. Casting directly to an
                    integer type works for positive coordinates, but fails for negative ones.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="x">The cursor x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The cursor y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="M:GLFW.Glfw.SetCursorPosition(GLFW.Window,System.Double,System.Double)">
            <summary>
                Sets the position, in screen coordinates, of the cursor relative to the upper-left corner of the
                client area of the specified window. The window must have input focus. If the window does not have input focus when
                this function is called, it fails silently.
                <para>
                    If the cursor mode is disabled then the cursor position is unconstrained and limited only by the minimum and
                    maximum values of a <see cref="T:System.Double" />.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="x">The desired x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The desired y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="M:GLFW.Glfw.SetCursorPositionCallback(GLFW.Window,GLFW.MouseCallback)">
            <summary>
                Sets the cursor position callback of the specified window, which is called when the cursor is moved.
                <para>
                    The callback is provided with the position, in screen coordinates, relative to the upper-left corner of the
                    client area of the window.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="mouseCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or<c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetCursorEnterCallback(GLFW.Window,GLFW.MouseEnterCallback)">
            <summary>
                Sets the cursor boundary crossing callback of the specified window, which is called when the cursor
                enters or leaves the client area of the window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="mouseCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetMouseButtonCallback(GLFW.Window,GLFW.MouseButtonCallback)">
            <summary>
                Sets the mouse button callback of the specified window, which is called when a mouse button is
                pressed or released.
                <para>
                    When a window loses input focus, it will generate synthetic mouse button release events for all pressed mouse
                    buttons. You can tell these events from user-generated events by the fact that the synthetic ones are generated
                    after the focus loss event has been processed, i.e. after the window focus callback has been called.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="mouseCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetScrollCallback(GLFW.Window,GLFW.MouseCallback)">
            <summary>
                Sets the scroll callback of the specified window, which is called when a scrolling device is used,
                such as a mouse wheel or scrolling area of a touchpad.
                <para>The scroll callback receives all scrolling input, like that from a mouse wheel or a touchpad scrolling area.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="mouseCallback">	The new scroll callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetMouseButton(GLFW.Window,GLFW.MouseButton)">
            <summary>
                Gets the last state reported for the specified mouse button to the specified window.
                <para>
                    If the <see cref="F:GLFW.InputMode.StickyMouseButton" /> input mode is enabled, this function returns
                    <see cref="F:GLFW.InputState.Press" /> the first time you call it for a mouse button that was pressed, even if that
                    mouse button has already been released.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="button">The desired mouse button.</param>
            <returns>The input state of the <paramref name="button" />.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowUserPointer(GLFW.Window,System.IntPtr)">
            <summary>
                Sets the user-defined pointer of the specified window. The current value is retained until the window
                is destroyed. The initial value is <see cref="F:System.IntPtr.Zero" />.
            </summary>
            <param name="window">A window instance.</param>
            <param name="userPointer">The user pointer value.</param>
        </member>
        <member name="M:GLFW.Glfw.GetWindowUserPointer(GLFW.Window)">
            <summary>
                Gets the current value of the user-defined pointer of the specified window. The initial value is
                <see cref="F:System.IntPtr.Zero" />.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The user-defined pointer.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowSizeLimits(GLFW.Window,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the size limits of the client area of the specified window. If the window is full screen, the
                size limits only take effect once it is made windowed. If the window is not resizable, this function does nothing.
                <para>The size limits are applied immediately to a windowed mode window and may cause it to be resized.</para>
                <para>
                    The maximum dimensions must be greater than or equal to the minimum dimensions and all must be greater than
                    or equal to zero.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="minWidth">The minimum width of the client area.</param>
            <param name="minHeight">The minimum height of the client area.</param>
            <param name="maxWidth">The maximum width of the client area.</param>
            <param name="maxHeight">The maximum height of the client area.</param>
        </member>
        <member name="M:GLFW.Glfw.SetWindowAspectRatio(GLFW.Window,System.Int32,System.Int32)">
            <summary>
                Sets the required aspect ratio of the client area of the specified window. If the window is full
                screen, the aspect ratio only takes effect once it is made windowed. If the window is not resizable, this function
                does nothing.
                <para>
                    The aspect ratio is specified as a numerator and a denominator and both values must be greater than zero. For
                    example, the common 16:9 aspect ratio is specified as 16 and 9, respectively.
                </para>
                <para>
                    If the numerator and denominator is set to <see cref="F:GLFW.Constants.Default" /> then the aspect ratio limit is
                    disabled.
                </para>
                <para>The aspect ratio is applied immediately to a windowed mode window and may cause it to be resized.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="numerator">The numerator of the desired aspect ratio.</param>
            <param name="denominator">The denominator of the desired aspect ratio.</param>
        </member>
        <member name="M:GLFW.Glfw.GetMonitorPhysicalSize(GLFW.Monitor,System.Int32@,System.Int32@)">
            <summary>
                Gets the size, in millimeters, of the display area of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="width">The width, in millimeters, of the monitor's display area.</param>
            <param name="height">The height, in millimeters, of the monitor's display area.</param>
        </member>
        <member name="M:GLFW.Glfw.GetMonitorPosition(GLFW.Monitor,System.Int32@,System.Int32@)">
            <summary>
                Gets the position, in screen coordinates, of the upper-left corner of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="x">The monitor x-coordinate.</param>
            <param name="y">The monitor y-coordinate.</param>
        </member>
        <member name="M:GLFW.Glfw.SetCharCallback(GLFW.Window,GLFW.CharCallback)">
            <summary>
                Sets the character callback of the specified window, which is called when a Unicode character is
                input.
                <para>
                    The character callback is intended for Unicode text input. As it deals with characters, it is keyboard layout
                    dependent, whereas the key callback is not. Characters do not map 1:1 to physical keys, as a key may produce
                    zero, one or more characters. If you want to know whether a specific physical key was pressed or released, see
                    the key callback instead.
                </para>
                <para>
                    The character callback behaves as system text input normally does and will not be called if modifier keys are
                    held down that would prevent normal text input on that platform, for example a Super (Command) key on OS X or
                    Alt key on Windows. There is a character with modifiers callback that receives these events.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="charCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetCharModsCallback(GLFW.Window,GLFW.CharModsCallback)">
            <summary>
                Sets the character with modifiers callback of the specified window, which is called when a Unicode
                character is input regardless of what modifier keys are used.
                <para>
                    The character with modifiers callback is intended for implementing custom Unicode character input. For
                    regular Unicode text input, see the character callback. Like the character callback, the character with
                    modifiers callback deals with characters and is keyboard layout dependent. Characters do not map 1:1 to
                    physical keys, as a key may produce zero, one or more characters. If you want to know whether a specific
                    physical key was pressed or released, see the key callback instead.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="charCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetKey(GLFW.Window,GLFW.Keys)">
            <summary>
                Gets the last state reported for the specified key to the specified window.
                <para>The higher-level action <see cref="F:GLFW.InputState.Repeat" /> is only reported to the key callback.</para>
                <para>
                    If the sticky keys input mode is enabled, this function returns <see cref="F:GLFW.InputState.Press" /> the first
                    time you call it for a key that was pressed, even if that key has already been released.
                </para>
                <para>
                    The key functions deal with physical keys, with key tokens named after their use on the standard US keyboard
                    layout. If you want to input text, use the Unicode character callback instead.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="key">The key to query.</param>
            <returns>Either <see cref="F:GLFW.InputState.Press" /> or <see cref="F:GLFW.InputState.Release" />.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetFramebufferSizeCallback(GLFW.Window,GLFW.SizeCallback)">
            <summary>
                Sets the framebuffer resize callback of the specified window, which is called when the framebuffer of
                the specified window is resized.
            </summary>
            <param name="window">A window instance.</param>
            <param name="sizeCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowRefreshCallback(GLFW.Window,GLFW.WindowCallback)">
            <summary>
                Sets the refresh callback of the specified window, which is called when the client area of the window
                needs to be redrawn, for example if the window has been exposed after having been covered by another window.
                <para>
                    On compositing window systems such as Aero, Compiz or Aqua, where the window contents are saved off-screen,
                    this callback may be called only very infrequently or never at all.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetKeyCallback(GLFW.Window,GLFW.KeyCallback)">
            <summary>
                Sets the key callback of the specified window, which is called when a key is pressed, repeated or
                released.
                <para>
                    The key functions deal with physical keys, with layout independent key tokens named after their values in the
                    standard US keyboard layout. If you want to input text, use the character callback instead.
                </para>
                <para>
                    When a window loses input focus, it will generate synthetic key release events for all pressed keys. You can
                    tell these events from user-generated events by the fact that the synthetic ones are generated after the focus
                    loss event has been processed, i.e. after the window focus callback has been called.
                </para>
                <para>
                    The scancode of a key is specific to that platform or sometimes even to that machine. Scancodes are intended
                    to allow users to bind keys that don't have a GLFW key token. Such keys have key set to
                    <see cref="F:GLFW.Keys.Unknown" />, their state is not saved and so it cannot be queried with <see cref="M:GLFW.Glfw.GetKey(GLFW.Window,GLFW.Keys)" />.
                </para>
                <para>Sometimes GLFW needs to generate synthetic key events, in which case the scancode may be zero.</para>
            </summary>
            <param name="window">The new key callback, or <c>null</c> to remove the currently set callback.</param>
            <param name="keyCallback">The key callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.JoystickPresent(GLFW.Joystick)">
            <summary>
                Gets whether the specified joystick is present.
            </summary>
            <param name="joystick">The joystick to query.</param>
            <returns><c>true</c> if the joystick is present, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetJoystickCallback(GLFW.JoystickCallback)">
            <summary>
                Sets the joystick configuration callback, or removes the currently set callback.
                <para>This is called when a joystick is connected to or disconnected from the system.</para>
            </summary>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetMonitorCallback(GLFW.MonitorCallback)">
            <summary>
                Sets the monitor configuration callback, or removes the currently set callback. This is called when a
                monitor is connected to or disconnected from the system.
            </summary>
            <param name="monitorCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetWindowIconifyCallback(GLFW.Window,GLFW.IconifyCallback)">
            <summary>
                Sets the iconification callback of the specified window, which is called when the window is iconified
                or restored.
            </summary>
            <param name="window">A window instance.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetInputMode(GLFW.Window,GLFW.InputMode,System.Int32)">
            <summary>
                Sets an input mode option for the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="mode">The mode to set a new value for.</param>
            <param name="value">The new value of the specified input mode.</param>
        </member>
        <member name="M:GLFW.Glfw.GetInputMode(GLFW.Window,GLFW.InputMode)">
            <summary>
                Gets the value of an input option for the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="mode">The mode to query.</param>
            <returns>Dependent on mode being queried.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetMonitorWorkArea(System.IntPtr,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Returns the position, in screen coordinates, of the upper-left corner of the work area of the specified
                monitor along with the work area size in screen coordinates.
                <para>
                    The work area is defined as the area of the monitor not occluded by the operating system task bar
                    where present. If no task bar exists then the work area is the monitor resolution in screen
                    coordinates.
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The monitor width.</param>
            <param name="height">The monitor height.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)" /> or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />.
                </para>
            </summary>
            <param name="hint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GLFW.Glfw.GetWindowAttribute(GLFW.Window,System.Int32)">
            <summary>
                Gets the value of the specified window attribute.
            </summary>
            <param name="window">A window instance.</param>
            <param name="attribute">The attribute to retrieve.</param>
            <returns>The value of the <paramref name="attribute" />.</returns>
        </member>
        <member name="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.String,GLFW.Monitor,GLFW.Window)">
            <summary>
                This function creates a window and its associated OpenGL or OpenGL ES context. Most of the options controlling how
                the window and its context should be created are specified with window hints.
            </summary>
            <param name="width">The desired width, in screen coordinates, of the window. This must be greater than zero.</param>
            <param name="height">The desired height, in screen coordinates, of the window. This must be greater than zero.</param>
            <param name="title">The initial window title.</param>
            <param name="monitor">The monitor to use for full screen mode, or <see cref="F:GLFW.Monitor.None" /> for windowed mode.</param>
            <param name="share">
                A window instance whose context to share resources with, or <see cref="F:GLFW.Window.None" /> to not share
                resources..
            </param>
            <returns>The created window, or <see cref="F:GLFW.Window.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetClientApi(GLFW.Window)">
            <summary>
                Gets the client API.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The client API.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetClipboardString(GLFW.Window)">
            <summary>
                Gets the contents of the system clipboard, if it contains or is convertible to a UTF-8 encoded
                string.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The contents of the clipboard as a UTF-8 encoded string, or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetContextCreationApi(GLFW.Window)">
            <summary>
                Gets the API used to create the context of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The API used to create the context.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetContextVersion(GLFW.Window)">
            <summary>
                Gets the context version of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The context version.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetExtensionSupported(System.String)">
            <summary>
                Gets whether the specified API extension is supported by the current OpenGL or OpenGL ES context.
                <para>It searches both for client API extension and context creation API extensions.</para>
            </summary>
            <param name="extension">The extension name.</param>
            <returns><c>true</c> if the extension is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetGammaRamp(GLFW.Monitor)">
            <summary>
                Gets the current gamma ramp of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The current gamma ramp, or empty structure if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetIsDebugContext(GLFW.Window)">
            <summary>
                Gets value indicating if specified window is using a debug context.
            </summary>
            <param name="window">A window instance.</param>
            <returns><c>true</c> if window context is debug context, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetIsForwardCompatible(GLFW.Window)">
            <summary>
                Gets value indicating if specified window is using a forward compatible context.
            </summary>
            <param name="window">A window instance.</param>
            <returns><c>true</c> if window context is forward compatible, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetJoystickAxes(GLFW.Joystick)">
            <summary>
                Gets the values of all axes of the specified joystick. Each element in the array is a value
                between -1.0 and 1.0.
                <para>
                    Querying a joystick slot with no device present is not an error, but will return an empty array. Call
                    <see cref="M:GLFW.Glfw.JoystickPresent(GLFW.Joystick)" /> to check device presence.
                </para>
            </summary>
            <param name="joystick">The joystick to query.</param>
            <returns>An array of axes values.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetJoystickButtons(GLFW.Joystick)">
            <summary>
                Gets the state of all buttons of the specified joystick.
            </summary>
            <param name="joystick">The joystick to query.</param>
            <returns>An array of values, either <see cref="F:GLFW.InputState.Press" /> and <see cref="F:GLFW.InputState.Release" />.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetJoystickName(GLFW.Joystick)">
            <summary>
                Gets the name of the specified joystick.
                <para>
                    Querying a joystick slot with no device present is not an error. <see cref="M:GLFW.Glfw.JoystickPresent(GLFW.Joystick)" /> to check
                    device presence.
                </para>
            </summary>
            <param name="joystick">The joystick to query.</param>
            <returns>The name of the joystick, or <c>null</c> if the joystick is not present or an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetKeyName(GLFW.Keys,System.Int32)">
            <summary>
                Gets the localized name of the specified printable key. This is intended for displaying key
                bindings to the user.
                <para>
                    If the key is <see cref="F:GLFW.Keys.Unknown" />, the scancode is used instead, otherwise the scancode is ignored.
                    If a non-printable key or (if the key is <see cref="F:GLFW.Keys.Unknown" />) a scancode that maps to a non-printable
                    key is specified, this function returns NULL.
                </para>
            </summary>
            <param name="key">The key to query.</param>
            <param name="scanCode">The scancode of the key to query.</param>
            <returns>The localized name of the key.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetMonitorName(GLFW.Monitor)">
            <summary>
                Gets a human-readable name, encoded as UTF-8, of the specified monitor.
                <para>
                    The name typically reflects the make and model of the monitor and is not guaranteed to be unique among the
                    connected monitors.
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The name of the monitor, or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetProcAddress(System.String)">
            <summary>
                Gets the address of the specified OpenGL or OpenGL ES core or extension function, if it is
                supported by the current context.
                This function does not apply to Vulkan. If you are rendering with Vulkan, use
                <see cref="M:GLFW.Vulkan.GetInstanceProcAddress(System.IntPtr,System.Byte[])" /> instead.
            </summary>
            <param name="procName">Name of the function.</param>
            <returns>The address of the function, or <see cref="F:System.IntPtr.Zero" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetProfile(GLFW.Window)">
            <summary>
                Gets the profile of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>Profile of the window.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetRobustness(GLFW.Window)">
            <summary>
                Gets the robustness value of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>Current set value of the robustness.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetVideoMode(GLFW.Monitor)">
            <summary>
                Gets the current video mode of the specified monitor.
                <para>
                    If you have created a full screen window for that monitor, the return value will depend on whether that
                    window is iconified.
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The current mode of the monitor, or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetVideoModes(GLFW.Monitor)">
            <summary>
                Gets an array of all video modes supported by the specified monitor.
                <para>
                    The returned array is sorted in ascending order, first by color bit depth (the sum of all channel depths) and
                    then by resolution area (the product of width and height).
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The array of video modes.</returns>
        </member>
        <member name="M:GLFW.Glfw.GetWindowAttribute(GLFW.Window,GLFW.WindowAttribute)">
            <summary>
                Gets the value of an attribute of the specified window or its OpenGL or OpenGL ES context.
            </summary>
            <param name="window">A window instance.</param>
            <param name="attribute">The window attribute whose value to return.</param>
            <returns>The value of the attribute, or zero if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Glfw.SetClipboardString(GLFW.Window,System.String)">
            <summary>
                Sets the system clipboard to the specified string.
            </summary>
            <param name="window">A window instance.</param>
            <param name="str">The string to set to the clipboard.</param>
        </member>
        <member name="M:GLFW.Glfw.SetWindowTitle(GLFW.Window,System.String)">
            <summary>
                Sets the window title, encoded as UTF-8, of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="title">The title to set.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Boolean)">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)" /> or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />.
                </para>
            </summary>
            <param name="hint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHint(GLFW.Hint,GLFW.ClientApi)">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)" /> or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />.
                </para>
            </summary>
            <param name="hint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHint(GLFW.Hint,GLFW.Constants)">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)" /> or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />.
                </para>
            </summary>
            <param name="hint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHint(GLFW.Hint,GLFW.ContextApi)">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)" /> or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />.
                </para>
            </summary>
            <param name="hint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHint(GLFW.Hint,GLFW.Robustness)">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)" /> or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />.
                </para>
            </summary>
            <param name="hint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHint(GLFW.Hint,GLFW.Profile)">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)" /> or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />.
                </para>
            </summary>
            <param name="hint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GLFW.Glfw.WindowHint(GLFW.Hint,GLFW.ReleaseBehavior)">
            <summary>
                Sets hints for the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:GLFW.Glfw.WindowHint(GLFW.Hint,System.Int32)" /> or <see cref="M:GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],GLFW.Monitor,GLFW.Window)" />.
                </para>
            </summary>
            <param name="hint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:GLFW.KeyEventArgs">
            <summary>
                Arguments supplied with keyboard events.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:GLFW.KeyEventArgs.#ctor(GLFW.Keys,System.Int32,GLFW.InputState,GLFW.ModifierKeys)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.KeyEventArgs" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="scanCode">The platform scan code of the key.</param>
            <param name="state">The state of the key.</param>
            <param name="mods">The modifier keys.</param>
        </member>
        <member name="P:GLFW.KeyEventArgs.Key">
            <summary>
                Gets the key whose state change raised the event.
            </summary>
            <value>
                The key.
            </value>
        </member>
        <member name="P:GLFW.KeyEventArgs.Modifiers">
            <summary>
                Gets the modifier keys at the time of the event.
            </summary>
            <value>
                The modifiers.
            </value>
        </member>
        <member name="P:GLFW.KeyEventArgs.ScanCode">
            <summary>
                Gets the platform scan code for the key.
            </summary>
            <value>
                The scan code.
            </value>
        </member>
        <member name="P:GLFW.KeyEventArgs.State">
            <summary>
                Gets the state of the key.
            </summary>
            <value>
                The state.
            </value>
        </member>
        <member name="T:GLFW.MaximizeEventArgs">
            <summary>
                Arguments supplied with maximize events.
            </summary>
        </member>
        <member name="M:GLFW.MaximizeEventArgs.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.MaximizeEventArgs" /> class.
            </summary>
            <param name="maximized"><c>true</c> it maximized, otherwise <c>false</c>.</param>
        </member>
        <member name="P:GLFW.MaximizeEventArgs.IsMaximized">
            <summary>
                Gets value indicating if window was maximized, or being restored.
            </summary>
        </member>
        <member name="T:GLFW.MouseButtonEventArgs">
            <summary>
                Arguments supplied with mouse button events.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:GLFW.MouseButtonEventArgs.#ctor(GLFW.MouseButton,GLFW.InputState,GLFW.ModifierKeys)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.MouseButtonEventArgs" /> class.
            </summary>
            <param name="button">The mouse button.</param>
            <param name="state">The state of the <paramref name="button" />.</param>
            <param name="modifiers">The modifier keys.</param>
        </member>
        <member name="P:GLFW.MouseButtonEventArgs.Action">
            <summary>
                Gets the state of the mouse button when the event was raised.
            </summary>
            <value>
                The action.
            </value>
        </member>
        <member name="P:GLFW.MouseButtonEventArgs.Button">
            <summary>
                Gets the mouse button that raised the event.
            </summary>
            <value>
                The button.
            </value>
        </member>
        <member name="P:GLFW.MouseButtonEventArgs.Modifiers">
            <summary>
                Gets the key modifiers present when mouse button was pressed.
            </summary>
            <value>
                The modifiers.
            </value>
        </member>
        <member name="T:GLFW.MouseMoveEventArgs">
            <summary>
                Arguments supplied with mouse movement events.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:GLFW.MouseMoveEventArgs.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.MouseMoveEventArgs" /> class.
            </summary>
            <param name="x">
                The cursor x-coordinate, relative to the left edge of the client area, or the amount of movement on
                x-axis if this is scroll event.
            </param>
            <param name="y">
                The cursor y-coordinate, relative to the left edge of the client area, or the amount of movement on
                y-axis if this is scroll event.
            </param>
        </member>
        <member name="P:GLFW.MouseMoveEventArgs.Position">
            <summary>
                Gets the position of the mouse, relative to the screen.
            </summary>
            <value>
                The position.
            </value>
        </member>
        <member name="P:GLFW.MouseMoveEventArgs.X">
            <summary>
                Gets the cursor x-coordinate, relative to the left edge of the client area, or the amount of movement on
                x-axis if this is scroll event.
            </summary>
            <value>
                The location on the x-axis.
            </value>
        </member>
        <member name="P:GLFW.MouseMoveEventArgs.Y">
            <summary>
                Gets the cursor y-coordinate, relative to the left edge of the client area, or the amount of movement on
                y-axis if this is scroll event.
            </summary>
            <value>
                The location on the y-axis.
            </value>
        </member>
        <member name="T:GLFW.Native">
            <summary>
                Provides access to relevant native functions of the current operating system.
                <para>
                    By using the native access functions you assert that you know what you're doing and how to fix problems
                    caused by using them.
                </para>
                <para>If you don't, you shouldn't be using them.</para>
            </summary>
        </member>
        <member name="M:GLFW.Native.GetCocoaMonitor(GLFW.Monitor)">
            <summary>
                Returns the CGDirectDisplayID of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The CGDirectDisplayID of the specified monitor, or <see cref="F:System.IntPtr.Zero" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetX11Display">
            <summary>
                Retrieves a pointer to the X11 display.
                <para>The pointer is to a native <c>Display</c> struct defined by X11..</para>
            </summary>
            <returns>A pointer to the X11 display struct.</returns>
        </member>
        <member name="M:GLFW.Native.GetWaylandDisplay">
            <summary>
                Retrieves a pointer to the Wayland display.
                <para>The pointer is to a native <c>wl_display</c> struct defined in wayland-client.c.</para>
            </summary>
            <returns>A pointer to the Wayland display struct.</returns>
            <seealso href="https://github.com/msteinert/wayland/blob/master/src/wayland-client.c" />
        </member>
        <member name="M:GLFW.Native.GetWaylandMonitor(GLFW.Monitor)">
            <summary>
                Retrieves a pointer to the Wayland output monitor.
                <para>The pointer is to a native <c>wl_output</c> struct defined in wayland-client.c.</para>
            </summary>
            <returns>A pointer to the Wayland output struct.</returns>
            <seealso href="https://github.com/msteinert/wayland/blob/master/src/wayland-client.c" />
        </member>
        <member name="M:GLFW.Native.GetWaylandWindow(GLFW.Window)">
            <summary>
                Returns the pointer to the Wayland window for the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>A pointer to a Wayland window, or <see cref="F:System.IntPtr.Zero" /> if error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetGLXWindow(GLFW.Window)">
            <summary>
                Returns the pointer to the GLX window for the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>A pointer to a GLX window, or <see cref="F:System.IntPtr.Zero" /> if error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetX11Window(GLFW.Window)">
            <summary>
                Returns the pointer to the X11 window for the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>A pointer to an X11 window, or <see cref="F:System.IntPtr.Zero" /> if error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetX11Monitor(GLFW.Monitor)">
            <summary>
                Returns the RROutput of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The RROutput of the specified monitor, or <see cref="F:System.IntPtr.Zero" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetX11Adapter(GLFW.Monitor)">
            <summary>
                Returns the RRCrtc of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The RRCrtc of the specified monitor, or <see cref="F:System.IntPtr.Zero" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetCocoaWindow(GLFW.Window)">
            <summary>
                Returns the pointer to the Cocoa window for the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>A pointer to a Cocoa window, or <see cref="F:System.IntPtr.Zero" /> if error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetNSGLContext(GLFW.Window)">
            <summary>
                Returns the NSOpenGLContext of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The NSOpenGLContext of the specified window, or <see cref="F:GLFW.NSOpenGLContext.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetOSMesaContext(GLFW.Window)">
            <summary>
                Returns the OSMesaContext of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The OSMesaContext of the specified window, or <see cref="F:GLFW.OSMesaContext.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetGLXContext(GLFW.Window)">
            <summary>
                Returns the GLXContext of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The GLXContext of the specified window, or <see cref="F:GLFW.GLXContext.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetEglContext(GLFW.Window)">
            <summary>
                Returns the EGLContext of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The EGLContext of the specified window, or <see cref="F:GLFW.EGLContext.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetEglDisplay">
            <summary>
                Returns the EGLDisplay used by GLFW.
            </summary>
            <returns>The EGLDisplay used by GLFW, or <see cref="F:GLFW.EGLDisplay.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetEglSurface(GLFW.Window)">
            <summary>
                Returns the <see cref="T:GLFW.EGLSurface" /> of the specified window
            </summary>
            <param name="window">A window instance.</param>
            <returns>The EGLSurface of the specified window, or <see cref="F:GLFW.EGLSurface.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetWglContext(GLFW.Window)">
            <summary>
                Returns the WGL context of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The WGL context of the specified window, or <see cref="F:GLFW.EGLContext.None" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetWin32Window(GLFW.Window)">
            <summary>
                Returns the HWND of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The HWND of the specified window, or <see cref="F:System.IntPtr.Zero" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetX11SelectionString">
            <summary>
                Returns the contents of the selection as a string.
            </summary>
            <returns>The selected string, or <c>null</c> if error occurs or no string is selected.</returns>
        </member>
        <member name="M:GLFW.Native.SetX11SelectionString(System.String)">
            <summary>
                Sets the clipboard string of an X11 window.
            </summary>
            <param name="str">The string to set.</param>
        </member>
        <member name="M:GLFW.Native.GetOSMesaColorBuffer(GLFW.Window,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)">
            <summary>
                Retrieves the color buffer associated with the specified window.
            </summary>
            <param name="window">The window whose color buffer to retrieve.</param>
            <param name="width">The width of the color buffer.</param>
            <param name="height">The height of the color buffer.</param>
            <param name="format">The pixel format of the color buffer.</param>
            <param name="buffer">A pointer to the first element in the buffer.</param>
            <returns><c>true</c> if operation was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.Native.GetOSMesaDepthBuffer(GLFW.Window,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)">
            <summary>
                Retrieves the depth buffer associated with the specified window.
            </summary>
            <param name="window">The window whose depth buffer to retrieve.</param>
            <param name="width">The width of the depth buffer.</param>
            <param name="height">The height of the depth buffer.</param>
            <param name="bytesPerValue">The number of bytes per element in the buffer.</param>
            <param name="buffer">A pointer to the first element in the buffer.</param>
            <returns><c>true</c> if operation was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.Native.GetWin32Adapter(GLFW.Monitor)">
            <summary>
                Gets the win32 adapter.
            </summary>
            <param name="monitor">A monitor instance.</param>
            <returns>dapter device name (for example \\.\DISPLAY1) of the specified monitor, or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Native.GetWin32Monitor(GLFW.Monitor)">
            <summary>
                Returns the display device name of the specified monitor
            </summary>
            <param name="monitor">A monitor instance.</param>
            <returns>
                The display device name (for example \\.\DISPLAY1\Monitor0) of the specified monitor, or <c>null</c> if an
                error occurred.
            </returns>
        </member>
        <member name="T:GLFW.NativeWindow">
            <summary>
                Provides a simplified interface for creating and using a GLFW window with properties, events, etc.
            </summary>
            <seealso cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" />
        </member>
        <member name="M:GLFW.NativeWindow.Equals(GLFW.NativeWindow)">
            <summary>
                Determines whether the specified <paramref name="window" /> is equal to this instance.
            </summary>
            <param name="window">A <see cref="T:GLFW.NativeWindow" /> instance to compare for equality.</param>
            <returns><c>true</c> if objects represent the same window, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.NativeWindow.OnMaximizeChanged(System.Boolean)">
            <summary>
                Raises the <see cref="P:GLFW.NativeWindow.Maximized" /> event.
            </summary>
            <param name="maximized">Flag indicating if window is being maximized or restored.</param>
        </member>
        <member name="E:GLFW.NativeWindow.ContentScaleChanged">
            <summary>
                Occurs when the content scale has been changed.
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.OnContentScaleChanged(System.Single,System.Single)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.ContentScaleChanged" /> event.
            </summary>
            <param name="xScale">The new scale on the x-axis.</param>
            <param name="yScale">The new scale on the y-axis.</param>
        </member>
        <member name="M:GLFW.NativeWindow.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)" />
        </member>
        <member name="M:GLFW.NativeWindow.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode" />
        </member>
        <member name="M:GLFW.NativeWindow.op_Equality(GLFW.NativeWindow,GLFW.NativeWindow)">
            <summary>
                Determines whether the specified window is equal to this instance.
            </summary>
            <param name="left">This instance.</param>
            <param name="right">A <see cref="T:GLFW.NativeWindow" /> instance to compare for equality.</param>
            <returns><c>true</c> if objects represent the same window, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GLFW.NativeWindow.op_Inequality(GLFW.NativeWindow,GLFW.NativeWindow)">
            <summary>
                Determines whether the specified window is not equal to this instance.
            </summary>
            <param name="left">This instance.</param>
            <param name="right">A <see cref="T:GLFW.NativeWindow" /> instance to compare for equality.</param>
            <returns><c>true</c> if objects do not represent the same window, otherwise <c>false</c>.</returns>
        </member>
        <member name="F:GLFW.NativeWindow.Window">
            <summary>
                The window instance this object wraps.
            </summary>
        </member>
        <member name="P:GLFW.NativeWindow.Bounds">
            <summary>
                Gets or sets the size and location of the window including its non-client elements (borders, title bar, etc.), in
                screen coordinates.
            </summary>
            <value>
                A <see cref="T:System.Drawing.Rectangle" /> in screen coordinates relative to the parent control that represents the size and
                location of the control including its non-client elements.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.ContentScale">
            <summary>
                Gets the ratio between the current DPI and the platform's default DPI.
            </summary>
            <seealso cref="M:GLFW.Glfw.GetWindowContentScale(System.IntPtr,System.Single@,System.Single@)" />
        </member>
        <member name="P:GLFW.NativeWindow.ClientBounds">
            <summary>
                Gets the size and location of the client area of the window, in screen coordinates.
            </summary>
            <value>
                A <see cref="T:System.Drawing.Rectangle" /> in screen coordinates that represents the size and location of the window's client area.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.ClientSize">
            <summary>
                Gets or sets the size of the client area of the window, in screen coordinates.
            </summary>
            <value>
                A <see cref="T:System.Drawing.Size" /> in screen coordinates that represents the size of the window's client area.
            </value>
        </member>
        <member name="M:GLFW.NativeWindow.RequestAttention">
            <summary>
                Requests user-attention to this window on platforms that support it,
                <para>
                    Once the user has given attention, usually by focusing the window or application, the system will end the
                    request automatically.
                </para>
            </summary>
        </member>
        <member name="P:GLFW.NativeWindow.Clipboard">
            <summary>
                Gets or sets a string to the system clipboard.
            </summary>
            <value>
                The clipboard string.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.CursorMode">
            <summary>
                Gets or sets the behavior of the mouse cursor.
            </summary>
            <value>
                The cursor mode.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.Handle">
            <summary>
                Gets the underlying pointer used by GLFW for this window instance.
            </summary>
            <value>
                The GLFW window handle.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.Hwnd">
            <summary>
                Gets the Window's HWND for this window.
                <para>WARNING: Windows only.</para>
            </summary>
            <value>
                The HWND pointer.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.IsClosing">
            <summary>
                Gets a value indicating whether this instance is closing.
            </summary>
            <value>
                <c>true</c> if this instance is closing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.IsDecorated">
            <summary>
                Gets a value indicating whether this instance is decorated.
            </summary>
            <value>
                <c>true</c> if this instance is decorated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.IsFloating">
            <summary>
                Gets a value indicating whether this instance is floating (top-most, always-on-top).
            </summary>
            <value>
                <c>true</c> if this instance is floating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.IsFocused">
            <summary>
                Gets a value indicating whether this instance is focused.
            </summary>
            <value>
                <c>true</c> if this instance is focused; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.IsResizable">
            <summary>
                Gets a value indicating whether this instance is resizable.
            </summary>
            <value>
                <c>true</c> if this instance is resizable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.Maximized">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:GLFW.NativeWindow" /> is maximized.
                <para>Has no effect on fullscreen windows.</para>
            </summary>
            <value>
                <c>true</c> if maximized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.Minimized">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:GLFW.NativeWindow" /> is minimized.
                <para>If window is already minimized, does nothing.</para>
            </summary>
            <value>
                <c>true</c> if minimized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.Monitor">
            <summary>
                Gets the monitor this window is fullscreen on.
                <para>Returns <see cref="F:GLFW.Monitor.None" /> if window is not fullscreen.</para>
            </summary>
            <value>
                The monitor.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.MousePosition">
            <summary>
                Gets or sets the mouse position in screen-coordinates relative to the client area of the window.
            </summary>
            <value>
                The mouse position.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.Position">
            <summary>
                Gets or sets the position of the window in screen coordinates, including border, titlebar, etc..
            </summary>
            <value>
                The position.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.Size">
            <summary>
                Gets or sets the size of the window, in screen coordinates, including border, titlebar, etc.
            </summary>
            <value>
                A <see cref="T:System.Drawing.Size" /> in screen coordinates that represents the size of the window.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.StickyKeys">
            <summary>
                Sets the sticky keys input mode.
                <para>
                    Set to <c>true</c> to enable sticky keys, or <c>false</c> to disable it. If sticky keys are enabled, a key
                    press will ensure that <see cref="M:GLFW.Glfw.GetKey(GLFW.Window,GLFW.Keys)" /> returns <see cref="F:GLFW.InputState.Press" /> the next time it is
                    called even if the key had been released before the call. This is useful when you are only interested in
                    whether keys have been pressed but not when or in which order.
                </para>
            </summary>
        </member>
        <member name="P:GLFW.NativeWindow.StickyMouseButtons">
            <summary>
                Gets or sets the sticky mouse button input mode.
                <para>
                    Set to <c>true</c> to enable sticky mouse buttons, or <c>false</c> to disable it. If sticky mouse buttons are
                    enabled, a mouse button press will ensure that <see cref="M:GLFW.Glfw.GetMouseButton(GLFW.Window,GLFW.MouseButton)" /> returns
                    <see cref="F:GLFW.InputState.Press" /> the next time it is called even if the mouse button had been released before
                    the call. This is useful when you are only interested in whether mouse buttons have been pressed but not when
                    or in which order.
                </para>
            </summary>
        </member>
        <member name="P:GLFW.NativeWindow.Title">
            <summary>
                Gets or sets the window title or caption.
            </summary>
            <value>
                The title.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.UserPointer">
            <summary>
                Gets or sets a user-defined pointer for GLFW to retain for this instance.
            </summary>
            <value>
                The user-defined pointer.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.VideoMode">
            <summary>
                Gets the video mode for the monitor this window is fullscreen on.
                <para>If window is not fullscreen, returns the <see cref="T:GLFW.VideoMode" /> for the primary monitor.</para>
            </summary>
            <value>
                The video mode.
            </value>
        </member>
        <member name="P:GLFW.NativeWindow.Visible">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:GLFW.NativeWindow" /> is visible.
            </summary>
            <value>
                <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:GLFW.NativeWindow.op_Implicit(GLFW.NativeWindow)~GLFW.Window">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.NativeWindow" /> to <see cref="T:GLFW.Window" />.
            </summary>
            <param name="nativeWindow">The game window.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.NativeWindow.op_Implicit(GLFW.NativeWindow)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.NativeWindow" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="nativeWindow">The game window.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.NativeWindow.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.NativeWindow" /> class.
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.NativeWindow" /> class.
            </summary>
            <param name="width">The desired width, in screen coordinates, of the window. This must be greater than zero.</param>
            <param name="height">The desired height, in screen coordinates, of the window. This must be greater than zero.</param>
            <param name="title">The initial window title.</param>
        </member>
        <member name="M:GLFW.NativeWindow.#ctor(System.Int32,System.Int32,System.String,GLFW.Monitor,GLFW.Window)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.NativeWindow" /> class.
            </summary>
            <param name="width">The desired width, in screen coordinates, of the window. This must be greater than zero.</param>
            <param name="height">The desired height, in screen coordinates, of the window. This must be greater than zero.</param>
            <param name="title">The initial window title.</param>
            <param name="monitor">The monitor to use for full screen mode, or <see cref="F:GLFW.Monitor.None" /> for windowed mode.</param>
            <param name="share">
                A window instance whose context to share resources with, or <see cref="F:GLFW.Window.None" /> to not share
                resources..
            </param>
        </member>
        <member name="M:GLFW.NativeWindow.CenterOnScreen">
            <summary>
                Centers the on window on the screen.
                <para>Has no effect on fullscreen or maximized windows.</para>
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.Close">
            <summary>
                Closes this instance.
                <para>This invalidates the window, but does not free its resources.</para>
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.Focus">
            <summary>
                Focuses this form to receive input and events.
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.Fullscreen">
            <summary>
                Sets the window fullscreen on the primary monitor.
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.Fullscreen(GLFW.Monitor)">
            <summary>
                Sets the window fullscreen on the specified monitor.
            </summary>
            <param name="monitor">The monitor to display the window fullscreen.</param>
        </member>
        <member name="M:GLFW.NativeWindow.MakeCurrent">
            <summary>
                Makes window and its context the current.
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.Maximize">
            <summary>
                Maximizes this window to fill the screen.
                <para>Has no effect if window is already maximized.</para>
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.Minimize">
            <summary>
                Minimizes this window.
                <para>Has no effect if window is already minimized.</para>
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.Restore">
            <summary>
                Restores a minimized window to its previous state.
                <para>Has no effect if window was already restored.</para>
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.SetAspectRatio(System.Int32,System.Int32)">
            <summary>
                Sets the aspect ratio to maintain for the window.
                <para>This function is ignored for fullscreen windows.</para>
            </summary>
            <param name="numerator">The numerator of the desired aspect ratio.</param>
            <param name="denominator">The denominator of the desired aspect ratio.</param>
        </member>
        <member name="M:GLFW.NativeWindow.SetIcons(GLFW.Image[])">
            <summary>
                Sets the icon(s) used for the titlebar, taskbar, etc.
                <para>Standard sizes are 16x16, 32x32, and 48x48.</para>
            </summary>
            <param name="images">One or more images to set as an icon.</param>
        </member>
        <member name="M:GLFW.NativeWindow.SetMonitor(GLFW.Monitor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the window monitor.
                <para>
                    If <paramref name="monitor" /> is not <see cref="F:GLFW.Monitor.None" />, the window will be full-screened and
                    dimensions ignored.
                </para>
            </summary>
            <param name="monitor">The desired monitor, or <see cref="F:GLFW.Monitor.None" /> to set windowed mode.</param>
            <param name="x">The desired x-coordinate of the upper-left corner of the client area.</param>
            <param name="y">The desired y-coordinate of the upper-left corner of the client area.</param>
            <param name="width">The desired width, in screen coordinates, of the client area or video mode.</param>
            <param name="height">The desired height, in screen coordinates, of the client area or video mode.</param>
            <param name="refreshRate">The desired refresh rate, in Hz, of the video mode, or <see cref="F:GLFW.Constants.Default" />.</param>
        </member>
        <member name="M:GLFW.NativeWindow.SetSizeLimits(System.Drawing.Size,System.Drawing.Size)">
            <summary>
                Sets the limits of the client size  area of the window.
            </summary>
            <param name="minSize">The minimum size of the client area.</param>
            <param name="maxSize">The maximum size of the client area.</param>
        </member>
        <member name="M:GLFW.NativeWindow.SetSizeLimits(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the limits of the client size  area of the window.
            </summary>
            <param name="minWidth">The minimum width of the client area.</param>
            <param name="minHeight">The minimum height of the client area.</param>
            <param name="maxWidth">The maximum width of the client area.</param>
            <param name="maxHeight">The maximum height of the client area.</param>
        </member>
        <member name="M:GLFW.NativeWindow.SwapBuffers">
            <summary>
                Swaps the front and back buffers when rendering with OpenGL or OpenGL ES.
                <para>
                    This should not be called on a window that is not using an OpenGL or OpenGL ES context (.i.e. Vulkan).
                </para>
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:GLFW.NativeWindow.ReleaseHandle">
            <summary>
                Releases the internal GLFW handle.
            </summary>
            <returns><c>true</c> if handle was released successfully, otherwise <c>false</c>.</returns>
        </member>
        <member name="E:GLFW.NativeWindow.MaximizeChanged">
            <summary>
                Occurs when the window is maximized or restored.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.CharacterInput">
            <summary>
                Occurs when the window receives character input.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.Closed">
            <summary>
                Occurs when the window is closed.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.Closing">
            <summary>
                Occurs when the form is closing, and provides subscribers means of canceling the action..
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.Disposed">
            <summary>
                Occurs when the window is disposed.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.FileDrop">
            <summary>
                Occurs when files are dropped onto the window client area with a drag-drop event.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.FocusChanged">
            <summary>
                Occurs when the window gains or loses focus.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.FramebufferSizeChanged">
            <summary>
                Occurs when the size of the internal framebuffer is changed.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.KeyAction">
            <summary>
                Occurs when a key is pressed, released, or repeated.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.KeyPress">
            <summary>
                Occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.KeyRelease">
            <summary>
                Occurs when a key is released.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.KeyRepeat">
            <summary>
                Occurs when a key is held long enough to raise a repeat event.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.MouseButton">
            <summary>
                Occurs when a mouse button is pressed or released.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.MouseEnter">
            <summary>
                Occurs when the mouse cursor enters the client area of the window.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.MouseLeave">
            <summary>
                Occurs when the mouse cursor leaves the client area of the window.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.MouseMoved">
            <summary>
                Occurs when mouse cursor is moved.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.MouseScroll">
            <summary>
                Occurs when mouse is scrolled.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.PositionChanged">
            <summary>
                Occurs when position of the <see cref="T:GLFW.NativeWindow" /> is changed.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.Refreshed">
            <summary>
                Occurs when window is refreshed.
            </summary>
        </member>
        <member name="E:GLFW.NativeWindow.SizeChanged">
            <summary>
                Occurs when size of the <see cref="T:GLFW.NativeWindow" /> is changed.
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.OnCharacterInput(System.UInt32,GLFW.ModifierKeys)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.CharacterInput" /> event.
            </summary>
            <param name="codePoint">The Unicode code point.</param>
            <param name="mods">The modifier keys present.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnClosed">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.Closed" /> event.
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.OnClosing">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.Closing" /> event.
            </summary>
        </member>
        <member name="M:GLFW.NativeWindow.OnFileDrop(System.String[])">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.FileDrop" /> event.
            </summary>
            <param name="paths">The filenames of the dropped files.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnFocusChanged(System.Boolean)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.FocusChanged" /> event.
            </summary>
            <param name="focusing"><c>true</c> if window is gaining focus, otherwise <c>false</c>.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnFramebufferSizeChanged(System.Int32,System.Int32)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.FramebufferSizeChanged" /> event.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnKey(GLFW.Keys,System.Int32,GLFW.InputState,GLFW.ModifierKeys)">
            <summary>
                Raises the appropriate key events.
            </summary>
            <param name="key">The key.</param>
            <param name="scanCode">The scan code.</param>
            <param name="state">The state of the key.</param>
            <param name="mods">The modifier keys.</param>
            <seealso cref="E:GLFW.NativeWindow.KeyPress" />
            <seealso cref="E:GLFW.NativeWindow.KeyRelease" />
            <seealso cref="E:GLFW.NativeWindow.KeyRepeat" />
            <seealso cref="E:GLFW.NativeWindow.KeyAction" />
        </member>
        <member name="M:GLFW.NativeWindow.OnMouseButton(GLFW.MouseButton,GLFW.InputState,GLFW.ModifierKeys)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.MouseButton" /> event.
            </summary>
            <param name="button">The mouse button.</param>
            <param name="state">The state of the mouse button.</param>
            <param name="modifiers">The modifier keys.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnMouseEnter(System.Boolean)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.MouseEnter" /> and <see cref="E:GLFW.NativeWindow.MouseLeave" /> events.
            </summary>
            <param name="entering"><c>true</c> if mouse is entering window, otherwise <c>false</c> if it is leaving.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnMouseMove(System.Double,System.Double)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.MouseMoved" /> event.
            </summary>
            <param name="x">The new x-coordinate of the mouse.</param>
            <param name="y">The new y-coordinate of the mouse.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnMouseScroll(System.Double,System.Double)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.MouseScroll" /> event.
            </summary>
            <param name="x">The amount of the scroll on the x-axis.</param>
            <param name="y">The amount of the scroll on the y-axis.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnPositionChanged(System.Double,System.Double)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.PositionChanged" /> event.
            </summary>
            <param name="x">The new position on the x-axis.</param>
            <param name="y">The new position on the y-axis.</param>
        </member>
        <member name="M:GLFW.NativeWindow.OnSizeChanged(System.Int32,System.Int32)">
            <summary>
                Raises the <see cref="E:GLFW.NativeWindow.SizeChanged" /> event.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="T:GLFW.SizeChangeEventArgs">
            <summary>
                Arguments supplied with size changing events.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:GLFW.SizeChangeEventArgs.Size">
            <summary>
                Gets the new size.
            </summary>
            <value>
                The size.
            </value>
        </member>
        <member name="M:GLFW.SizeChangeEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.SizeChangeEventArgs" /> class.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:GLFW.SizeChangeEventArgs.#ctor(System.Drawing.Size)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.SizeChangeEventArgs" /> class.
            </summary>
            <param name="size">The new size.</param>
        </member>
        <member name="T:GLFW.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GLFW.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GLFW.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GLFW.Strings.ApiUnavailable">
            <summary>
              Looks up a localized string similar to GLFW could not find support for the requested API on the system..
            </summary>
        </member>
        <member name="P:GLFW.Strings.FormatUnavailable">
            <summary>
              Looks up a localized string similar to The requested pixel format is not supported or contents of the clipboard could not be converted to the requested format..
            </summary>
        </member>
        <member name="P:GLFW.Strings.InvalidEnum">
            <summary>
              Looks up a localized string similar to One of the arguments to the function was an invalid enum value..
            </summary>
        </member>
        <member name="P:GLFW.Strings.InvalidValue">
            <summary>
              Looks up a localized string similar to One of the arguments to the function was an invalid value..
            </summary>
        </member>
        <member name="P:GLFW.Strings.NoCurrentContext">
            <summary>
              Looks up a localized string similar to A called that needs and operates on the current OpenGL or OpenGL ES context but no context is current on the calling thread.
            </summary>
        </member>
        <member name="P:GLFW.Strings.NotInitialized">
            <summary>
              Looks up a localized string similar to GLFW not yet initialized..
            </summary>
        </member>
        <member name="P:GLFW.Strings.NoWindowContext">
            <summary>
              Looks up a localized string similar to A window that does not have an OpenGL or OpenGL ES context was passed to a function that requires it to have one..
            </summary>
        </member>
        <member name="P:GLFW.Strings.OutOfMemory">
            <summary>
              Looks up a localized string similar to A memory allocation failed..
            </summary>
        </member>
        <member name="P:GLFW.Strings.PlatformError">
            <summary>
              Looks up a localized string similar to A platform-specific error occurred.
            </summary>
        </member>
        <member name="P:GLFW.Strings.UnknownError">
            <summary>
              Looks up a localized string similar to An unknown error has occurred..
            </summary>
        </member>
        <member name="P:GLFW.Strings.VersionUnavailable">
            <summary>
              Looks up a localized string similar to The requested OpenGL or OpenGL ES version (including any requested context or framebuffer hints) is not available on this machine..
            </summary>
        </member>
        <member name="T:GLFW.Cursor">
            <summary>
                Wrapper around a handle for a window cursor object.
            </summary>
            <seealso cref="T:GLFW.Cursor" />
        </member>
        <member name="F:GLFW.Cursor.None">
            <summary>
                Represents a <c>null</c> value for a <see cref="T:GLFW.Cursor" /> object.
            </summary>
        </member>
        <member name="F:GLFW.Cursor.cursor">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.Cursor.Equals(GLFW.Cursor)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.Cursor" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.Cursor" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.Cursor" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.Cursor.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.Cursor.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.Cursor.op_Equality(GLFW.Cursor,GLFW.Cursor)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.Cursor.op_Inequality(GLFW.Cursor,GLFW.Cursor)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="T:GLFW.EGLContext">
            <summary>
                Wrapper around a EGL context pointer.
            </summary>
        </member>
        <member name="F:GLFW.EGLContext.None">
            <summary>
                Describes a default/null instance.
            </summary>
        </member>
        <member name="F:GLFW.EGLContext.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.EGLContext.op_Implicit(GLFW.EGLContext)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.EGLContext" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="context">The context.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.EGLContext.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GLFW.EGLContext.Equals(GLFW.EGLContext)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.EGLContext" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.EGLContext" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.EGLContext" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.EGLContext.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.EGLContext.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.EGLContext.op_Equality(GLFW.EGLContext,GLFW.EGLContext)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.EGLContext.op_Inequality(GLFW.EGLContext,GLFW.EGLContext)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="T:GLFW.EGLDisplay">
            <summary>
                Wrapper around a EGL display pointer.
            </summary>
        </member>
        <member name="F:GLFW.EGLDisplay.None">
            <summary>
                Describes a default/null instance.
            </summary>
        </member>
        <member name="F:GLFW.EGLDisplay.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.EGLDisplay.op_Implicit(GLFW.EGLDisplay)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.EGLDisplay" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="display">The display.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.EGLDisplay.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GLFW.EGLDisplay.Equals(GLFW.EGLDisplay)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.EGLDisplay" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.EGLDisplay" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.EGLDisplay" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.EGLDisplay.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.EGLDisplay.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.EGLDisplay.op_Equality(GLFW.EGLDisplay,GLFW.EGLDisplay)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.EGLDisplay.op_Inequality(GLFW.EGLDisplay,GLFW.EGLDisplay)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="T:GLFW.EGLSurface">
            <summary>
                Wrapper around a EGL surface pointer.
            </summary>
        </member>
        <member name="F:GLFW.EGLSurface.None">
            <summary>
                Describes a default/null instance.
            </summary>
        </member>
        <member name="F:GLFW.EGLSurface.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.EGLSurface.op_Implicit(GLFW.EGLSurface)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.EGLSurface" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="surface">The surface.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.EGLSurface.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GLFW.EGLSurface.Equals(GLFW.EGLSurface)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.EGLSurface" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.EGLSurface" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.EGLSurface" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.EGLSurface.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.EGLSurface.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.EGLSurface.op_Equality(GLFW.EGLSurface,GLFW.EGLSurface)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.EGLSurface.op_Inequality(GLFW.EGLSurface,GLFW.EGLSurface)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="T:GLFW.GamePadState">
            <summary>
                Represents the state of a gamepad.
            </summary>
        </member>
        <member name="M:GLFW.GamePadState.GetButtonState(GLFW.GamePadButton)">
            <summary>
                Gets the state of the specified <paramref name="button" />.
            </summary>
            <param name="button">The button to retrieve the state of.</param>
            <returns>The button state, either <see cref="F:GLFW.InputState.Press" /> or <see cref="F:GLFW.InputState.Release" />.</returns>
        </member>
        <member name="M:GLFW.GamePadState.GetAxis(GLFW.GamePadAxis)">
            <summary>
                Gets the value of the specified <paramref name="axis" />.
            </summary>
            <param name="axis">The axis to retrieve the value of.</param>
            <returns>The axis value, in the range of <c>-1.0</c> and <c>1.0</c> inclusive.</returns>
        </member>
        <member name="T:GLFW.GammaRamp">
            <summary>
                Describes the gamma ramp for a monitor.
            </summary>
        </member>
        <member name="F:GLFW.GammaRamp.Red">
            <summary>
                An array of value describing the response of the red channel.
            </summary>
        </member>
        <member name="F:GLFW.GammaRamp.Green">
            <summary>
                An array of value describing the response of the green channel.
            </summary>
        </member>
        <member name="F:GLFW.GammaRamp.Blue">
            <summary>
                An array of value describing the response of the blue channel.
            </summary>
        </member>
        <member name="F:GLFW.GammaRamp.Size">
            <summary>
                The number of elements in each array.
            </summary>
        </member>
        <member name="M:GLFW.GammaRamp.#ctor(System.UInt16[],System.UInt16[],System.UInt16[])">
            <summary>
                Creates a new instance of a <see cref="T:GLFW.GammaRamp" /> using the specified values.
                <para>WARNING: On some platforms (Windows), each value MUST be 256 in length.</para>
            </summary>
            <param name="red">An array of value describing the response of the red channel.</param>
            <param name="green">An array of value describing the response of the green channel.</param>
            <param name="blue">An array of value describing the response of the blue channel.</param>
        </member>
        <member name="T:GLFW.GammaRampInternal">
            <summary>
                Used internally for marshalling
            </summary>
        </member>
        <member name="T:GLFW.GLXContext">
            <summary>
                Wrapper around a GLX context pointer.
            </summary>
        </member>
        <member name="F:GLFW.GLXContext.None">
            <summary>
                Describes a default/null instance.
            </summary>
        </member>
        <member name="F:GLFW.GLXContext.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.GLXContext.op_Implicit(GLFW.GLXContext)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.GLXContext" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="context">The context.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.GLXContext.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GLFW.GLXContext.Equals(GLFW.GLXContext)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.GLXContext" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.GLXContext" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.GLXContext" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.GLXContext.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.GLXContext.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.GLXContext.op_Equality(GLFW.GLXContext,GLFW.GLXContext)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.GLXContext.op_Inequality(GLFW.GLXContext,GLFW.GLXContext)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="T:GLFW.HGLRC">
            <summary>
                Wrapper around a Window's HGLRC pointer.
            </summary>
        </member>
        <member name="F:GLFW.HGLRC.None">
            <summary>
                Describes a default/null instance.
            </summary>
        </member>
        <member name="F:GLFW.HGLRC.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.HGLRC.op_Implicit(GLFW.HGLRC)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.HGLRC" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="hglrc">The hglrc.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.HGLRC.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GLFW.HGLRC.Equals(GLFW.HGLRC)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.HGLRC" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.HGLRC" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.HGLRC" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.HGLRC.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.HGLRC.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.HGLRC.op_Equality(GLFW.HGLRC,GLFW.HGLRC)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.HGLRC.op_Inequality(GLFW.HGLRC,GLFW.HGLRC)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="T:GLFW.Image">
            <summary>
                Describes a basic image structure.
            </summary>
        </member>
        <member name="F:GLFW.Image.Width">
            <summary>
                The height, in pixels, of this image.
            </summary>
        </member>
        <member name="F:GLFW.Image.Height">
            <summary>
                The width, in pixels, of this image.
            </summary>
        </member>
        <member name="F:GLFW.Image.Pixels">
            <summary>
                Pointer to the RGBA pixel data of this image, arranged left-to-right, top-to-bottom.
            </summary>
        </member>
        <member name="M:GLFW.Image.#ctor(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:GLFW.Image" /> struct.
            </summary>
            <param name="width">The height, in pixels, of this image.</param>
            <param name="height">The width, in pixels, of this image..</param>
            <param name="pixels">Pointer to the RGBA pixel data of this image, arranged left-to-right, top-to-bottom.</param>
        </member>
        <member name="T:GLFW.Monitor">
            <summary>
                Wrapper around a pointer to monitor.
            </summary>
            <seealso cref="T:GLFW.Monitor" />
        </member>
        <member name="F:GLFW.Monitor.None">
            <summary>
                Represents a <c>null</c> value for a <see cref="T:GLFW.Monitor" /> object.
            </summary>
        </member>
        <member name="F:GLFW.Monitor.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.Monitor.Equals(GLFW.Monitor)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.Monitor" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.Monitor" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.Monitor.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.Monitor.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.Monitor.op_Equality(GLFW.Monitor,GLFW.Monitor)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.Monitor.op_Inequality(GLFW.Monitor,GLFW.Monitor)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.Monitor.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:GLFW.Monitor.WorkArea">
            <summary>
                Gets the position, in screen coordinates of the valid work are for the monitor.
            </summary>
            <seealso cref="M:GLFW.Glfw.GetMonitorWorkArea(System.IntPtr,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />
        </member>
        <member name="P:GLFW.Monitor.ContentScale">
            <summary>
                Gets the content scale of this monitor.
                <para>The content scale is the ratio between the current DPI and the platform's default DPI.</para>
            </summary>
            <seealso cref="M:GLFW.Glfw.GetMonitorContentScale(System.IntPtr,System.Single@,System.Single@)" />
        </member>
        <member name="P:GLFW.Monitor.UserPointer">
            <summary>
                Gets or sets a user-defined pointer to associate with the window.
            </summary>
            <seealso cref="M:GLFW.Glfw.GetMonitorUserPointer(System.IntPtr)" />
            <seealso cref="M:GLFW.Glfw.SetMonitorUserPointer(System.IntPtr,System.IntPtr)" />
        </member>
        <member name="T:GLFW.NSOpenGLContext">
            <summary>
                Wrapper around a NSOpenGL context pointer.
            </summary>
        </member>
        <member name="F:GLFW.NSOpenGLContext.None">
            <summary>
                Describes a default/null instance.
            </summary>
        </member>
        <member name="F:GLFW.NSOpenGLContext.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.NSOpenGLContext.op_Implicit(GLFW.NSOpenGLContext)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.NSOpenGLContext" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="context">The context.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.NSOpenGLContext.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GLFW.NSOpenGLContext.Equals(GLFW.NSOpenGLContext)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.NSOpenGLContext" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.NSOpenGLContext" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.NSOpenGLContext" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.NSOpenGLContext.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.NSOpenGLContext.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.NSOpenGLContext.op_Equality(GLFW.NSOpenGLContext,GLFW.NSOpenGLContext)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.NSOpenGLContext.op_Inequality(GLFW.NSOpenGLContext,GLFW.NSOpenGLContext)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="T:GLFW.OSMesaContext">
            <summary>
                Wrapper around a OSMesa context pointer.
            </summary>
        </member>
        <member name="F:GLFW.OSMesaContext.None">
            <summary>
                Describes a default/null instance.
            </summary>
        </member>
        <member name="F:GLFW.OSMesaContext.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.OSMesaContext.op_Implicit(GLFW.OSMesaContext)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.OSMesaContext" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="context">The context.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.OSMesaContext.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GLFW.OSMesaContext.Equals(GLFW.OSMesaContext)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.OSMesaContext" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.OSMesaContext" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.OSMesaContext" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.OSMesaContext.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.OSMesaContext.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.OSMesaContext.op_Equality(GLFW.OSMesaContext,GLFW.OSMesaContext)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.OSMesaContext.op_Inequality(GLFW.OSMesaContext,GLFW.OSMesaContext)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="T:GLFW.VideoMode">
            <summary>
                Structure that describes a single video mode.
            </summary>
        </member>
        <member name="F:GLFW.VideoMode.Width">
            <summary>
                The width, in screen coordinates, of the video mode.
            </summary>
        </member>
        <member name="F:GLFW.VideoMode.Height">
            <summary>
                The height, in screen coordinates, of the video mode.
            </summary>
        </member>
        <member name="F:GLFW.VideoMode.RedBits">
            <summary>
                The bit depth of the red channel of the video mode.
            </summary>
        </member>
        <member name="F:GLFW.VideoMode.GreenBits">
            <summary>
                The bit depth of the green channel of the video mode.
            </summary>
        </member>
        <member name="F:GLFW.VideoMode.BlueBits">
            <summary>
                The bit depth of the blue channel of the video mode.
            </summary>
        </member>
        <member name="F:GLFW.VideoMode.RefreshRate">
            <summary>
                The refresh rate, in Hz, of the video mode.
            </summary>
        </member>
        <member name="T:GLFW.Window">
            <summary>
                Wrapper around a GLFW window pointer.
            </summary>
        </member>
        <member name="F:GLFW.Window.None">
            <summary>
                Describes a default/null instance.
            </summary>
        </member>
        <member name="F:GLFW.Window.handle">
            <summary>
                Internal pointer.
            </summary>
        </member>
        <member name="M:GLFW.Window.op_Implicit(GLFW.Window)~System.IntPtr">
            <summary>
                Performs an implicit conversion from <see cref="T:GLFW.Window" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="window">The window.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:GLFW.Window.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GLFW.Window.Equals(GLFW.Window)">
            <summary>
                Determines whether the specified <see cref="T:GLFW.Window" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:GLFW.Window" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:GLFW.Window" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GLFW.Window.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:GLFW.Window.Opacity">
            <summary>
                Gets or sets the opacity of the window in the range of <c>0.0</c> and <c>1.0</c> inclusive.
            </summary>
        </member>
        <member name="M:GLFW.Window.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:GLFW.Window.op_Equality(GLFW.Window,GLFW.Window)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.Window.op_Inequality(GLFW.Window,GLFW.Window)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:GLFW.Util.PtrToStringUTF8(System.IntPtr)">
            <summary>
                Reads memory from the pointer until the first null byte is encountered and decodes the bytes from UTF-8 into a
                managed <see cref="T:System.String" />.
            </summary>
            <param name="ptr">Pointer to the start of the string.</param>
            <returns>Managed string created from read UTF-8 bytes.</returns>
        </member>
        <member name="T:GLFW.Vulkan">
            <summary>
                Implements the Vulkan specific functions of GLFW.
                <para>See http://www.glfw.org/docs/latest/vulkan_guide.html for detailed documentation.</para>
            </summary>
        </member>
        <member name="P:GLFW.Vulkan.IsSupported">
            <summary>
                Gets whether the Vulkan loader has been found. This check is performed by <see cref="M:GLFW.Glfw.Init" />.
            </summary>
            <value>
                <c>true</c> if Vulkan is supported; otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:GLFW.Vulkan.CreateWindowSurface(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
                This function creates a Vulkan surface for the specified window.
            </summary>
            <param name="vulkan">A pointer to the Vulkan instance.</param>
            <param name="window">The window handle.</param>
            <param name="allocator">A pointer to the allocator to use, or <see cref="F:System.IntPtr.Zero" /> to use default allocator.</param>
            <param name="surface">The handle to the created Vulkan surface.</param>
            <returns>VK_SUCCESS if successful, or a Vulkan error code if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Vulkan.GetPhysicalDevicePresentationSupport(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
                This function returns whether the specified queue family of the specified physical device supports presentation to
                the platform GLFW was built for.
            </summary>
            <param name="instance">The instance that the physical device belongs to.</param>
            <param name="device">The physical device that the queue family belongs to.</param>
            <param name="family">The index of the queue family to query.</param>
            <returns><c>true</c> if the queue family supports presentation, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GLFW.Vulkan.GetInstanceProcAddress(System.IntPtr,System.String)">
            <summary>
                This function returns the address of the specified Vulkan core or extension function for the specified instance. If
                instance is set to <see cref="F:System.IntPtr.Zero" /> it can return any function exported from the Vulkan loader.
                <para>
                    If Vulkan is not available on the machine, this function returns <see cref="F:System.IntPtr.Zero" /> and generates an
                    error. Use <see cref="P:GLFW.Vulkan.IsSupported" /> to check whether Vulkan is available.
                </para>
            </summary>
            <param name="vulkan">The vulkan instance.</param>
            <param name="procName">Name of the function.</param>
            <returns>The address of the function, or <see cref="F:System.IntPtr.Zero" /> if an error occurred.</returns>
        </member>
        <member name="M:GLFW.Vulkan.GetRequiredInstanceExtensions">
            <summary>
                This function returns an array of names of Vulkan instance extensions required by GLFW for creating Vulkan surfaces
                for GLFW windows. If successful, the list will always contains VK_KHR_surface, so if you don't require any
                additional extensions you can pass this list directly to the VkInstanceCreateInfo struct.
                <para>
                    If Vulkan is not available on the machine, this function returns generates an error, use
                    <see cref="P:GLFW.Vulkan.IsSupported" /> to first check if supported.
                </para>
                <para>
                    If Vulkan is available but no set of extensions allowing window surface creation was found, this function
                    returns an empty array. You may still use Vulkan for off-screen rendering and compute work.
                </para>
            </summary>
            <returns>An array of extension names.</returns>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so checking for <c>null</c> is required before its usage.
            </summary>
            <example>
                <code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element can never be <c>null</c>.
            </summary>
            <example>
                <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
                Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can never be null.
            </summary>
            <example>
                <code>
            public void Foo([ItemNotNull]List&lt;string&gt; books)
            {
              foreach (var book in books) {
                if (book != null) // Warning: Expression is always true
                 Console.WriteLine(book.ToUpper());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
                Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can be null.
            </summary>
            <example>
                <code>
            public void Foo([ItemCanBeNull]List&lt;string&gt; books)
            {
              foreach (var book in books)
              {
                // Warning: Possible 'System.NullReferenceException'
                Console.WriteLine(book.ToUpper());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by the format pattern and (optional) arguments.
                The parameter, which contains the format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as the format string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
                Use this annotation to specify a type that contains static or const fields
                with values for the annotated property/field/parameter.
                The specified type will be used to improve completion suggestions.
            </summary>
            <example>
                <code>
            namespace TestNamespace
            {
              public class Constants
              {
                public static int INT_CONST = 1;
                public const string STRING_CONST = "1";
              }
            
              public class Class1
              {
                [ValueProvider("TestNamespace.Constants")] public int myField;
                public void Foo([ValueProvider("TestNamespace.Constants")] string str) { }
            
                public void Test()
                {
                  Foo(/*try completion here*/);//
                  myField = /*try completion here*/
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be a string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
                <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
                is used to notify that some property value changed.
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
            public class Foo : INotifyPropertyChanged {
              public event PropertyChangedEventHandler PropertyChanged;
            
              [NotifyPropertyChangedInvocator]
              protected virtual void NotifyChanged(string propertyName) { ... }
            
              string _name;
            
              public string Name {
                get { return _name; }
                set { _name = value; NotifyChanged("LastName"); /* Warning */ }
              }
            }
            </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output.
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If the method has a single input parameter, its name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for the method output
                means that the method doesn't return normally (throws or terminates the process).<br />
                Value <c>canbenull</c> is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
                with rows separated by semicolon. There is no notion of order rows, all rows are checked
                for applicability and applied per each program state tracked by the analysis engine.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("null &lt;= param:null")] // reverse condition syntax
            public string GetName(string surname)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates whether the marked element should be localized.
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
                so this symbol will not be reported as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
                Can be applied to attributes, type parameters, and parameters of a type assignable from <see cref="T:System.Type" />
                .
                When applied to an attribute, the decorated attribute behaves the same as <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
                When applied to a type parameter or to a parameter of type <see cref="T:System.Type" />,  indicates that the
                corresponding type
                is used implicitly.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseKindFlags">
            <summary>
                Specify the details of implicitly used symbol when it is marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered to be used implicitly when marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
                If the parameter is a delegate, indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
                <code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
                Indicates that the return value of the method invocation must be used.
            </summary>
            <remarks>
                Methods decorated with this attribute (in contrast to pure methods) might change state,
                but make no sense without using their return value. <br />
                Similarly to <see cref="T:JetBrains.Annotations.PureAttribute" />, this attribute
                will help detecting usages of the method when the return value in not used.
                Additionally, you can optionally specify a custom message, which will be used when showing warnings, e.g.
                <code>[MustUseReturnValue("Use the return value to...")]</code>.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
                Indicates the type member or parameter of some type, that should be used instead of all other ways
                to get the value of that type. This annotation is useful when you have some "context" value evaluated
                and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
                <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder within a web project.
                Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
                An extension method marked with this attribute is processed by code completion
                as a 'Source Template'. When the extension method is completed over some expression, its source code
                is automatically expanded like a template at call site.
            </summary>
            <remarks>
                Template method body can contain valid source code and/or special comments starting with '$'.
                Text inside these comments is added as source code when the template is applied. Template parameters
                can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
                Use the <see cref="T:JetBrains.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
            <example>
                In this example, the 'forEach' method is a source template available over all values
                of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
                <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
                Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
                You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
                is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
                template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
                for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
            <example>
                Applying the attribute on a source template method:
                <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
                Applying the attribute on a template method parameter:
                <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
                Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
                parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
                Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
                If the target parameter is used several times in the template, only one occurrence becomes editable;
                other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
                use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
                Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
                <see cref="T:JetBrains.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
                an MVC controller. If applied to a method, the MVC controller name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC Master. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC model type. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
                partial view. If applied to a method, the MVC partial view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name.
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that the marked parameter or method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
                Indicates how method, constructor invocation, or property access
                over collection type affects the contents of the collection.
                Use <see cref="P:JetBrains.Annotations.CollectionAccessAttribute.CollectionAccessType" /> to specify the access type.
            </summary>
            <remarks>
                Using this attribute only makes sense if all collection methods are marked with this attribute.
            </remarks>
            <example>
                <code>
            public class MyStringCollection : List&lt;string&gt;
            {
              [CollectionAccess(CollectionAccessType.Read)]
              public string GetFirstString()
              {
                return this.ElementAt(0);
              }
            }
            class Test
            {
              public void Foo()
              {
                // Warning: Contents of the collection is never updated
                var col = new MyStringCollection();
                string x = col.GetFirstString();
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessType">
            <summary>
                Provides a value for the <see cref="T:JetBrains.Annotations.CollectionAccessAttribute" /> to define
                how the collection method invocation affects the contents of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is assertion method, i.e. it halts the control flow if
                one of the conditions is satisfied. To set the condition, mark one of the parameters with
                <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
                Indicates the condition parameter of the assertion method. The method itself should be
                marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
                the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
                Specifies assertion type. If the assertion method argument satisfies the condition,
                then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
                Indicates that the marked method unconditionally terminates control flow execution.
                For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
                Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
                .Where). This annotation allows inference of [InstantHandle] annotation for parameters
                of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
                Indicates that IEnumerable passed as a parameter is not enumerated.
                Use this annotation to suppress the 'Possible multiple enumeration of IEnumerable' inspection.
            </summary>
            <example>
                <code>
            static void ThrowIfNull&lt;T&gt;([NoEnumeration] T v, string n) where T : class
            {
              // custom check for null but no enumeration
            }
            
            void Foo(IEnumerable&lt;string&gt; values)
            {
              ThrowIfNull(values, nameof(values));
              var x = values.ToList(); // No warnings about multiple enumeration
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
                Indicates that the marked parameter is a regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
                Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
                The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
                as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
                is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
                enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
                Property should have the tree ancestor of the <c>ItemsControl</c> type or
                marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
        </member>
    </members>
</doc>
